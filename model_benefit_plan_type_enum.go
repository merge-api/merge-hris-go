/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// BenefitPlanTypeEnum the model 'BenefitPlanTypeEnum'
type BenefitPlanTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of BenefitPlanTypeEnum
const (
    BENEFITPLANTYPEENUM_MERGE_NONSTANDARD_VALUE BenefitPlanTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	BENEFITPLANTYPEENUM_MEDICAL BenefitPlanTypeEnum = "MEDICAL"
	BENEFITPLANTYPEENUM_DENTAL BenefitPlanTypeEnum = "DENTAL"
	BENEFITPLANTYPEENUM_VISION BenefitPlanTypeEnum = "VISION"
	BENEFITPLANTYPEENUM_HSA BenefitPlanTypeEnum = "HSA"
	BENEFITPLANTYPEENUM_FSA_MEDICAL BenefitPlanTypeEnum = "FSA_MEDICAL"
	BENEFITPLANTYPEENUM_FSA_DEPENDENT_CARE BenefitPlanTypeEnum = "FSA_DEPENDENT_CARE"
	BENEFITPLANTYPEENUM_SIMPLE_IRA BenefitPlanTypeEnum = "SIMPLE_IRA"
	BENEFITPLANTYPEENUM__401_K BenefitPlanTypeEnum = "_401K"
	BENEFITPLANTYPEENUM_ROTH_401_K BenefitPlanTypeEnum = "ROTH_401K"
	BENEFITPLANTYPEENUM_OTHER_NON_TAXABLE BenefitPlanTypeEnum = "OTHER_NON_TAXABLE"
	BENEFITPLANTYPEENUM_COMMUTER_TRANSIT BenefitPlanTypeEnum = "COMMUTER_TRANSIT"
	BENEFITPLANTYPEENUM_COMMUTER_PARKING BenefitPlanTypeEnum = "COMMUTER_PARKING"
	BENEFITPLANTYPEENUM__401_K_LOAN_PAYMENT BenefitPlanTypeEnum = "_401K_LOAN_PAYMENT"
	BENEFITPLANTYPEENUM_SHORT_DISABILITY BenefitPlanTypeEnum = "SHORT_DISABILITY"
	BENEFITPLANTYPEENUM_LONG_DISABILITY BenefitPlanTypeEnum = "LONG_DISABILITY"
	BENEFITPLANTYPEENUM_LIFE BenefitPlanTypeEnum = "LIFE"
	BENEFITPLANTYPEENUM_SEP_IRA BenefitPlanTypeEnum = "SEP_IRA"
	BENEFITPLANTYPEENUM_SARSEP BenefitPlanTypeEnum = "SARSEP"
	BENEFITPLANTYPEENUM_CUSTOM_TAXABLE BenefitPlanTypeEnum = "CUSTOM_TAXABLE"
	BENEFITPLANTYPEENUM__403_B BenefitPlanTypeEnum = "_403B"
	BENEFITPLANTYPEENUM_ROTH_403_B BenefitPlanTypeEnum = "ROTH_403B"
	BENEFITPLANTYPEENUM_STUDENT_LOAN BenefitPlanTypeEnum = "STUDENT_LOAN"
)

var allowedBenefitPlanTypeEnumEnumValues = []BenefitPlanTypeEnum{
	"MEDICAL",
	"DENTAL",
	"VISION",
	"HSA",
	"FSA_MEDICAL",
	"FSA_DEPENDENT_CARE",
	"SIMPLE_IRA",
	"_401K",
	"ROTH_401K",
	"OTHER_NON_TAXABLE",
	"COMMUTER_TRANSIT",
	"COMMUTER_PARKING",
	"_401K_LOAN_PAYMENT",
	"SHORT_DISABILITY",
	"LONG_DISABILITY",
	"LIFE",
	"SEP_IRA",
	"SARSEP",
	"CUSTOM_TAXABLE",
	"_403B",
	"ROTH_403B",
	"STUDENT_LOAN",
}

func (v *BenefitPlanTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BenefitPlanTypeEnum(value)
	for _, existing := range allowedBenefitPlanTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = BENEFITPLANTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewBenefitPlanTypeEnumFromValue returns a pointer to a valid BenefitPlanTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBenefitPlanTypeEnumFromValue(v string) (*BenefitPlanTypeEnum, error) {
	ev := BenefitPlanTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := BENEFITPLANTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BenefitPlanTypeEnum) IsValid() bool {
	for _, existing := range allowedBenefitPlanTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BenefitPlanTypeEnum value
func (v BenefitPlanTypeEnum) Ptr() *BenefitPlanTypeEnum {
	return &v
}

type NullableBenefitPlanTypeEnum struct {
	value *BenefitPlanTypeEnum
	isSet bool
}

func (v NullableBenefitPlanTypeEnum) Get() *BenefitPlanTypeEnum {
	return v.value
}

func (v *NullableBenefitPlanTypeEnum) Set(val *BenefitPlanTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBenefitPlanTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBenefitPlanTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenefitPlanTypeEnum(val *BenefitPlanTypeEnum) *NullableBenefitPlanTypeEnum {
	return &NullableBenefitPlanTypeEnum{value: val, isSet: true}
}

func (v NullableBenefitPlanTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenefitPlanTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

