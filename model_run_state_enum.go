/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// RunStateEnum the model 'RunStateEnum'
type RunStateEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of RunStateEnum
const (
    RUNSTATEENUM_MERGE_NONSTANDARD_VALUE RunStateEnum = "MERGE_NONSTANDARD_VALUE"
    
	RUNSTATEENUM_PAID RunStateEnum = "PAID"
	RUNSTATEENUM_DRAFT RunStateEnum = "DRAFT"
	RUNSTATEENUM_APPROVED RunStateEnum = "APPROVED"
	RUNSTATEENUM_FAILED RunStateEnum = "FAILED"
	RUNSTATEENUM_CLOSED RunStateEnum = "CLOSED"
)

var allowedRunStateEnumEnumValues = []RunStateEnum{
	"PAID",
	"DRAFT",
	"APPROVED",
	"FAILED",
	"CLOSED",
}

func (v *RunStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunStateEnum(value)
	for _, existing := range allowedRunStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = RUNSTATEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewRunStateEnumFromValue returns a pointer to a valid RunStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunStateEnumFromValue(v string) (*RunStateEnum, error) {
	ev := RunStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := RUNSTATEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunStateEnum) IsValid() bool {
	for _, existing := range allowedRunStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunStateEnum value
func (v RunStateEnum) Ptr() *RunStateEnum {
	return &v
}

type NullableRunStateEnum struct {
	value *RunStateEnum
	isSet bool
}

func (v NullableRunStateEnum) Get() *RunStateEnum {
	return v.value
}

func (v *NullableRunStateEnum) Set(val *RunStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStateEnum(val *RunStateEnum) *NullableRunStateEnum {
	return &NullableRunStateEnum{value: val, isSet: true}
}

func (v NullableRunStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

