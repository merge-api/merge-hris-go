/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// PolicyTypeEnum * `VACATION` - VACATION * `SICK` - SICK * `PERSONAL` - PERSONAL * `JURY_DUTY` - JURY_DUTY * `VOLUNTEER` - VOLUNTEER * `BEREAVEMENT` - BEREAVEMENT
type PolicyTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of PolicyTypeEnum
const (
    POLICYTYPEENUM_MERGE_NONSTANDARD_VALUE PolicyTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	POLICYTYPEENUM_VACATION PolicyTypeEnum = "VACATION"
	POLICYTYPEENUM_SICK PolicyTypeEnum = "SICK"
	POLICYTYPEENUM_PERSONAL PolicyTypeEnum = "PERSONAL"
	POLICYTYPEENUM_JURY_DUTY PolicyTypeEnum = "JURY_DUTY"
	POLICYTYPEENUM_VOLUNTEER PolicyTypeEnum = "VOLUNTEER"
	POLICYTYPEENUM_BEREAVEMENT PolicyTypeEnum = "BEREAVEMENT"
)

var allowedPolicyTypeEnumEnumValues = []PolicyTypeEnum{
	"VACATION",
	"SICK",
	"PERSONAL",
	"JURY_DUTY",
	"VOLUNTEER",
	"BEREAVEMENT",
}

func (v *PolicyTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyTypeEnum(value)
	for _, existing := range allowedPolicyTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = POLICYTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewPolicyTypeEnumFromValue returns a pointer to a valid PolicyTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyTypeEnumFromValue(v string) (*PolicyTypeEnum, error) {
	ev := PolicyTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := POLICYTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyTypeEnum) IsValid() bool {
	for _, existing := range allowedPolicyTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyTypeEnum value
func (v PolicyTypeEnum) Ptr() *PolicyTypeEnum {
	return &v
}

type NullablePolicyTypeEnum struct {
	value *PolicyTypeEnum
	isSet bool
}

func (v NullablePolicyTypeEnum) Get() *PolicyTypeEnum {
	return v.value
}

func (v *NullablePolicyTypeEnum) Set(val *PolicyTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTypeEnum(val *PolicyTypeEnum) *NullablePolicyTypeEnum {
	return &NullablePolicyTypeEnum{value: val, isSet: true}
}

func (v NullablePolicyTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

