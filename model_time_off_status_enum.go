/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// TimeOffStatusEnum the model 'TimeOffStatusEnum'
type TimeOffStatusEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of TimeOffStatusEnum
const (
    TIMEOFFSTATUSENUM_MERGE_NONSTANDARD_VALUE TimeOffStatusEnum = "MERGE_NONSTANDARD_VALUE"
    
	TIMEOFFSTATUSENUM_REQUESTED TimeOffStatusEnum = "REQUESTED"
	TIMEOFFSTATUSENUM_APPROVED TimeOffStatusEnum = "APPROVED"
	TIMEOFFSTATUSENUM_DECLINED TimeOffStatusEnum = "DECLINED"
	TIMEOFFSTATUSENUM_CANCELLED TimeOffStatusEnum = "CANCELLED"
	TIMEOFFSTATUSENUM_DELETED TimeOffStatusEnum = "DELETED"
)

var allowedTimeOffStatusEnumEnumValues = []TimeOffStatusEnum{
	"REQUESTED",
	"APPROVED",
	"DECLINED",
	"CANCELLED",
	"DELETED",
}

func (v *TimeOffStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeOffStatusEnum(value)
	for _, existing := range allowedTimeOffStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = TIMEOFFSTATUSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewTimeOffStatusEnumFromValue returns a pointer to a valid TimeOffStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeOffStatusEnumFromValue(v string) (*TimeOffStatusEnum, error) {
	ev := TimeOffStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := TIMEOFFSTATUSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeOffStatusEnum) IsValid() bool {
	for _, existing := range allowedTimeOffStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeOffStatusEnum value
func (v TimeOffStatusEnum) Ptr() *TimeOffStatusEnum {
	return &v
}

type NullableTimeOffStatusEnum struct {
	value *TimeOffStatusEnum
	isSet bool
}

func (v NullableTimeOffStatusEnum) Get() *TimeOffStatusEnum {
	return v.value
}

func (v *NullableTimeOffStatusEnum) Set(val *TimeOffStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOffStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOffStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOffStatusEnum(val *TimeOffStatusEnum) *NullableTimeOffStatusEnum {
	return &NullableTimeOffStatusEnum{value: val, isSet: true}
}

func (v NullableTimeOffStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOffStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

