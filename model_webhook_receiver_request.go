/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// WebhookReceiverRequest struct for WebhookReceiverRequest
type WebhookReceiverRequest struct {
	Event string `json:"event"`
	IsActive bool `json:"is_active"`
	Key *string `json:"key,omitempty"`
    // raw json response by property name
    ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewWebhookReceiverRequest instantiates a new WebhookReceiverRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookReceiverRequest(event string, isActive bool) *WebhookReceiverRequest {
	this := WebhookReceiverRequest{}
	this.Event = event
	this.IsActive = isActive
	return &this
}

// NewWebhookReceiverRequestWithDefaults instantiates a new WebhookReceiverRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookReceiverRequestWithDefaults() *WebhookReceiverRequest {
	this := WebhookReceiverRequest{}
	return &this
}

// GetEvent returns the Event field value
func (o *WebhookReceiverRequest) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *WebhookReceiverRequest) GetEventOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *WebhookReceiverRequest) SetEvent(v string) {
	o.Event = v
}

// GetIsActive returns the IsActive field value
func (o *WebhookReceiverRequest) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *WebhookReceiverRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *WebhookReceiverRequest) SetIsActive(v bool) {
	o.IsActive = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *WebhookReceiverRequest) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookReceiverRequest) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *WebhookReceiverRequest) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *WebhookReceiverRequest) SetKey(v string) {
	o.Key = &v
}

func (o WebhookReceiverRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

func (v *WebhookReceiverRequest) UnmarshalJSON(src []byte) error {
    type WebhookReceiverRequestUnmarshalTarget WebhookReceiverRequest

	var intermediateResult WebhookReceiverRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = WebhookReceiverRequest(intermediateResult)
	return nil
}
type NullableWebhookReceiverRequest struct {
	value *WebhookReceiverRequest
	isSet bool
}

func (v NullableWebhookReceiverRequest) Get() *WebhookReceiverRequest {
	return v.value
}

func (v *NullableWebhookReceiverRequest) Set(val *WebhookReceiverRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookReceiverRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookReceiverRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookReceiverRequest(val *WebhookReceiverRequest) *NullableWebhookReceiverRequest {
	return &NullableWebhookReceiverRequest{value: val, isSet: true}
}

func (v NullableWebhookReceiverRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookReceiverRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


