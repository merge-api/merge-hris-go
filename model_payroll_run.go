/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"time"
)

// PayrollRun # The PayrollRun Object ### Description The `PayrollRun` object is used to represent a payroll run.  ### Usage Example Fetch from the `LIST PayrollRuns` endpoint and filter by `ID` to show all payroll runs.
type PayrollRun struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	RunState string `json:"run_state"`
	RunType string `json:"run_type"`
	// The day and time the payroll run started.
	StartDate NullableTime `json:"start_date,omitempty"`
	// The day and time the payroll run ended.
	EndDate NullableTime `json:"end_date,omitempty"`
	// The day and time the payroll run was checked.
	CheckDate NullableTime `json:"check_date,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
}

// NewPayrollRun instantiates a new PayrollRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayrollRun(runState string, runType string) *PayrollRun {
	this := PayrollRun{}
	this.RunState = runState
	this.RunType = runType
	return &this
}

// NewPayrollRunWithDefaults instantiates a new PayrollRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayrollRunWithDefaults() *PayrollRun {
	this := PayrollRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PayrollRun) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayrollRun) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PayrollRun) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PayrollRun) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayrollRun) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayrollRun) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *PayrollRun) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *PayrollRun) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *PayrollRun) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *PayrollRun) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetRunState returns the RunState field value
func (o *PayrollRun) GetRunState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunState
}

// GetRunStateOk returns a tuple with the RunState field value
// and a boolean to check if the value has been set.
func (o *PayrollRun) GetRunStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RunState, true
}

// SetRunState sets field value
func (o *PayrollRun) SetRunState(v string) {
	o.RunState = v
}

// GetRunType returns the RunType field value
func (o *PayrollRun) GetRunType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunType
}

// GetRunTypeOk returns a tuple with the RunType field value
// and a boolean to check if the value has been set.
func (o *PayrollRun) GetRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RunType, true
}

// SetRunType sets field value
func (o *PayrollRun) SetRunType(v string) {
	o.RunType = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayrollRun) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayrollRun) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *PayrollRun) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *PayrollRun) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *PayrollRun) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *PayrollRun) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayrollRun) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayrollRun) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *PayrollRun) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *PayrollRun) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *PayrollRun) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *PayrollRun) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetCheckDate returns the CheckDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayrollRun) GetCheckDate() time.Time {
	if o == nil || o.CheckDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CheckDate.Get()
}

// GetCheckDateOk returns a tuple with the CheckDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayrollRun) GetCheckDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CheckDate.Get(), o.CheckDate.IsSet()
}

// HasCheckDate returns a boolean if a field has been set.
func (o *PayrollRun) HasCheckDate() bool {
	if o != nil && o.CheckDate.IsSet() {
		return true
	}

	return false
}

// SetCheckDate gets a reference to the given NullableTime and assigns it to the CheckDate field.
func (o *PayrollRun) SetCheckDate(v time.Time) {
	o.CheckDate.Set(&v)
}
// SetCheckDateNil sets the value for CheckDate to be an explicit nil
func (o *PayrollRun) SetCheckDateNil() {
	o.CheckDate.Set(nil)
}

// UnsetCheckDate ensures that no value is present for CheckDate, not even an explicit nil
func (o *PayrollRun) UnsetCheckDate() {
	o.CheckDate.Unset()
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayrollRun) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayrollRun) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *PayrollRun) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *PayrollRun) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

func (o PayrollRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if true {
		toSerialize["run_state"] = o.RunState
	}
	if true {
		toSerialize["run_type"] = o.RunType
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if o.CheckDate.IsSet() {
		toSerialize["check_date"] = o.CheckDate.Get()
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return json.Marshal(toSerialize)
}

type NullablePayrollRun struct {
	value *PayrollRun
	isSet bool
}

func (v NullablePayrollRun) Get() *PayrollRun {
	return v.value
}

func (v *NullablePayrollRun) Set(val *PayrollRun) {
	v.value = val
	v.isSet = true
}

func (v NullablePayrollRun) IsSet() bool {
	return v.isSet
}

func (v *NullablePayrollRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayrollRun(val *PayrollRun) *NullablePayrollRun {
	return &NullablePayrollRun{value: val, isSet: true}
}

func (v NullablePayrollRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayrollRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


