/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// LinkedAccountSelectiveSyncConfiguration struct for LinkedAccountSelectiveSyncConfiguration
type LinkedAccountSelectiveSyncConfiguration struct {
	// The conditions belonging to a selective sync.
	LinkedAccountConditions *[]LinkedAccountCondition `json:"linked_account_conditions,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewLinkedAccountSelectiveSyncConfiguration instantiates a new LinkedAccountSelectiveSyncConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedAccountSelectiveSyncConfiguration() *LinkedAccountSelectiveSyncConfiguration {
	this := LinkedAccountSelectiveSyncConfiguration{}
	return &this
}

// NewLinkedAccountSelectiveSyncConfigurationWithDefaults instantiates a new LinkedAccountSelectiveSyncConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedAccountSelectiveSyncConfigurationWithDefaults() *LinkedAccountSelectiveSyncConfiguration {
	this := LinkedAccountSelectiveSyncConfiguration{}
	return &this
}

// GetLinkedAccountConditions returns the LinkedAccountConditions field value if set, zero value otherwise.
func (o *LinkedAccountSelectiveSyncConfiguration) GetLinkedAccountConditions() []LinkedAccountCondition {
	if o == nil || o.LinkedAccountConditions == nil {
		var ret []LinkedAccountCondition
		return ret
	}
	return *o.LinkedAccountConditions
}

// GetLinkedAccountConditionsOk returns a tuple with the LinkedAccountConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedAccountSelectiveSyncConfiguration) GetLinkedAccountConditionsOk() (*[]LinkedAccountCondition, bool) {
	if o == nil || o.LinkedAccountConditions == nil {
		return nil, false
	}
	return o.LinkedAccountConditions, true
}

// HasLinkedAccountConditions returns a boolean if a field has been set.
func (o *LinkedAccountSelectiveSyncConfiguration) HasLinkedAccountConditions() bool {
	if o != nil && o.LinkedAccountConditions != nil {
		return true
	}

	return false
}

// SetLinkedAccountConditions gets a reference to the given []LinkedAccountCondition and assigns it to the LinkedAccountConditions field.
func (o *LinkedAccountSelectiveSyncConfiguration) SetLinkedAccountConditions(v []LinkedAccountCondition) {
	o.LinkedAccountConditions = &v
}

func (o LinkedAccountSelectiveSyncConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LinkedAccountConditions != nil {
		toSerialize["linked_account_conditions"] = o.LinkedAccountConditions
	}
	return json.Marshal(toSerialize)
}

func (v *LinkedAccountSelectiveSyncConfiguration) UnmarshalJSON(src []byte) error {
    type LinkedAccountSelectiveSyncConfigurationUnmarshalTarget LinkedAccountSelectiveSyncConfiguration

	var intermediateResult LinkedAccountSelectiveSyncConfigurationUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = LinkedAccountSelectiveSyncConfiguration(intermediateResult)
	return nil
}
type NullableLinkedAccountSelectiveSyncConfiguration struct {
	value *LinkedAccountSelectiveSyncConfiguration
	isSet bool
}

func (v NullableLinkedAccountSelectiveSyncConfiguration) Get() *LinkedAccountSelectiveSyncConfiguration {
	return v.value
}

func (v *NullableLinkedAccountSelectiveSyncConfiguration) Set(val *LinkedAccountSelectiveSyncConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedAccountSelectiveSyncConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedAccountSelectiveSyncConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedAccountSelectiveSyncConfiguration(val *LinkedAccountSelectiveSyncConfiguration) *NullableLinkedAccountSelectiveSyncConfiguration {
	return &NullableLinkedAccountSelectiveSyncConfiguration{value: val, isSet: true}
}

func (v NullableLinkedAccountSelectiveSyncConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedAccountSelectiveSyncConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


