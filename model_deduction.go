/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"time"
)

// Deduction # The Deduction Object ### Description The `Deduction` object is used to represent an array of the wages withheld from total earnings for the purpose of paying taxes.  ### Usage Example Fetch from the `LIST Deductions` endpoint and filter by `ID` to show all deductions.
type Deduction struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	EmployeePayrollRun NullableString `json:"employee_payroll_run,omitempty"`
	// The deduction's name.
	Name NullableString `json:"name,omitempty"`
	// The amount of money that is withheld from an employee's gross pay by the employee.
	EmployeeDeduction NullableFloat64 `json:"employee_deduction,omitempty"`
	// The amount of money that is withheld on behalf of an employee by the company.
	CompanyDeduction NullableFloat64 `json:"company_deduction,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewDeduction instantiates a new Deduction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeduction() *Deduction {
	this := Deduction{}
	return &this
}

// NewDeductionWithDefaults instantiates a new Deduction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeductionWithDefaults() *Deduction {
	this := Deduction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Deduction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deduction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Deduction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Deduction) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *Deduction) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *Deduction) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *Deduction) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *Deduction) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetEmployeePayrollRun returns the EmployeePayrollRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetEmployeePayrollRun() string {
	if o == nil || o.EmployeePayrollRun.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmployeePayrollRun.Get()
}

// GetEmployeePayrollRunOk returns a tuple with the EmployeePayrollRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetEmployeePayrollRunOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeePayrollRun.Get(), o.EmployeePayrollRun.IsSet()
}

// HasEmployeePayrollRun returns a boolean if a field has been set.
func (o *Deduction) HasEmployeePayrollRun() bool {
	if o != nil && o.EmployeePayrollRun.IsSet() {
		return true
	}

	return false
}

// SetEmployeePayrollRun gets a reference to the given NullableString and assigns it to the EmployeePayrollRun field.
func (o *Deduction) SetEmployeePayrollRun(v string) {
	o.EmployeePayrollRun.Set(&v)
}
// SetEmployeePayrollRunNil sets the value for EmployeePayrollRun to be an explicit nil
func (o *Deduction) SetEmployeePayrollRunNil() {
	o.EmployeePayrollRun.Set(nil)
}

// UnsetEmployeePayrollRun ensures that no value is present for EmployeePayrollRun, not even an explicit nil
func (o *Deduction) UnsetEmployeePayrollRun() {
	o.EmployeePayrollRun.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Deduction) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Deduction) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Deduction) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Deduction) UnsetName() {
	o.Name.Unset()
}

// GetEmployeeDeduction returns the EmployeeDeduction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetEmployeeDeduction() float64 {
	if o == nil || o.EmployeeDeduction.Get() == nil {
		var ret float64
		return ret
	}
	return *o.EmployeeDeduction.Get()
}

// GetEmployeeDeductionOk returns a tuple with the EmployeeDeduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetEmployeeDeductionOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeeDeduction.Get(), o.EmployeeDeduction.IsSet()
}

// HasEmployeeDeduction returns a boolean if a field has been set.
func (o *Deduction) HasEmployeeDeduction() bool {
	if o != nil && o.EmployeeDeduction.IsSet() {
		return true
	}

	return false
}

// SetEmployeeDeduction gets a reference to the given NullableFloat64 and assigns it to the EmployeeDeduction field.
func (o *Deduction) SetEmployeeDeduction(v float64) {
	o.EmployeeDeduction.Set(&v)
}
// SetEmployeeDeductionNil sets the value for EmployeeDeduction to be an explicit nil
func (o *Deduction) SetEmployeeDeductionNil() {
	o.EmployeeDeduction.Set(nil)
}

// UnsetEmployeeDeduction ensures that no value is present for EmployeeDeduction, not even an explicit nil
func (o *Deduction) UnsetEmployeeDeduction() {
	o.EmployeeDeduction.Unset()
}

// GetCompanyDeduction returns the CompanyDeduction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetCompanyDeduction() float64 {
	if o == nil || o.CompanyDeduction.Get() == nil {
		var ret float64
		return ret
	}
	return *o.CompanyDeduction.Get()
}

// GetCompanyDeductionOk returns a tuple with the CompanyDeduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetCompanyDeductionOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompanyDeduction.Get(), o.CompanyDeduction.IsSet()
}

// HasCompanyDeduction returns a boolean if a field has been set.
func (o *Deduction) HasCompanyDeduction() bool {
	if o != nil && o.CompanyDeduction.IsSet() {
		return true
	}

	return false
}

// SetCompanyDeduction gets a reference to the given NullableFloat64 and assigns it to the CompanyDeduction field.
func (o *Deduction) SetCompanyDeduction(v float64) {
	o.CompanyDeduction.Set(&v)
}
// SetCompanyDeductionNil sets the value for CompanyDeduction to be an explicit nil
func (o *Deduction) SetCompanyDeductionNil() {
	o.CompanyDeduction.Set(nil)
}

// UnsetCompanyDeduction ensures that no value is present for CompanyDeduction, not even an explicit nil
func (o *Deduction) UnsetCompanyDeduction() {
	o.CompanyDeduction.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *Deduction) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deduction) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *Deduction) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *Deduction) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *Deduction) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *Deduction) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Deduction) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deduction) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Deduction) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Deduction) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deduction) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deduction) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *Deduction) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *Deduction) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

func (o Deduction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.EmployeePayrollRun.IsSet() {
		toSerialize["employee_payroll_run"] = o.EmployeePayrollRun.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.EmployeeDeduction.IsSet() {
		toSerialize["employee_deduction"] = o.EmployeeDeduction.Get()
	}
	if o.CompanyDeduction.IsSet() {
		toSerialize["company_deduction"] = o.CompanyDeduction.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return json.Marshal(toSerialize)
}

func (v *Deduction) UnmarshalJSON(src []byte) error {
    type DeductionUnmarshalTarget Deduction

	var intermediateResult DeductionUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = Deduction(intermediateResult)
	return nil
}
type NullableDeduction struct {
	value *Deduction
	isSet bool
}

func (v NullableDeduction) Get() *Deduction {
	return v.value
}

func (v *NullableDeduction) Set(val *Deduction) {
	v.value = val
	v.isSet = true
}

func (v NullableDeduction) IsSet() bool {
	return v.isSet
}

func (v *NullableDeduction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeduction(val *Deduction) *NullableDeduction {
	return &NullableDeduction{value: val, isSet: true}
}

func (v NullableDeduction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeduction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


