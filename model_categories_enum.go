/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// CategoriesEnum the model 'CategoriesEnum'
type CategoriesEnum string

// List of CategoriesEnum
const (
	CATEGORIESENUM_HRIS CategoriesEnum = "hris"
	CATEGORIESENUM_ATS CategoriesEnum = "ats"
	CATEGORIESENUM_ACCOUNTING CategoriesEnum = "accounting"
)

var allowedCategoriesEnumEnumValues = []CategoriesEnum{
	"hris",
	"ats",
	"accounting",
}

func (v *CategoriesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoriesEnum(value)
	for _, existing := range allowedCategoriesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CategoriesEnum", value)
}

// NewCategoriesEnumFromValue returns a pointer to a valid CategoriesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoriesEnumFromValue(v string) (*CategoriesEnum, error) {
	ev := CategoriesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CategoriesEnum: valid values are %v", v, allowedCategoriesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoriesEnum) IsValid() bool {
	for _, existing := range allowedCategoriesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoriesEnum value
func (v CategoriesEnum) Ptr() *CategoriesEnum {
	return &v
}

type NullableCategoriesEnum struct {
	value *CategoriesEnum
	isSet bool
}

func (v NullableCategoriesEnum) Get() *CategoriesEnum {
	return v.value
}

func (v *NullableCategoriesEnum) Set(val *CategoriesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoriesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoriesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoriesEnum(val *CategoriesEnum) *NullableCategoriesEnum {
	return &NullableCategoriesEnum{value: val, isSet: true}
}

func (v NullableCategoriesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoriesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

