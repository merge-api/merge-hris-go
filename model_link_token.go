/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// LinkToken struct for LinkToken
type LinkToken struct {
	LinkToken string `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl *string `json:"magic_link_url,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewLinkToken instantiates a new LinkToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkToken(linkToken string) *LinkToken {
	this := LinkToken{}
	this.LinkToken = linkToken
	return &this
}

// NewLinkTokenWithDefaults instantiates a new LinkToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkTokenWithDefaults() *LinkToken {
	this := LinkToken{}
	return &this
}

// GetLinkToken returns the LinkToken field value
func (o *LinkToken) GetLinkToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkToken
}

// GetLinkTokenOk returns a tuple with the LinkToken field value
// and a boolean to check if the value has been set.
func (o *LinkToken) GetLinkTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LinkToken, true
}

// SetLinkToken sets field value
func (o *LinkToken) SetLinkToken(v string) {
	o.LinkToken = v
}

// GetIntegrationName returns the IntegrationName field value if set, zero value otherwise.
func (o *LinkToken) GetIntegrationName() string {
	if o == nil || o.IntegrationName == nil {
		var ret string
		return ret
	}
	return *o.IntegrationName
}

// GetIntegrationNameOk returns a tuple with the IntegrationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkToken) GetIntegrationNameOk() (*string, bool) {
	if o == nil || o.IntegrationName == nil {
		return nil, false
	}
	return o.IntegrationName, true
}

// HasIntegrationName returns a boolean if a field has been set.
func (o *LinkToken) HasIntegrationName() bool {
	if o != nil && o.IntegrationName != nil {
		return true
	}

	return false
}

// SetIntegrationName gets a reference to the given string and assigns it to the IntegrationName field.
func (o *LinkToken) SetIntegrationName(v string) {
	o.IntegrationName = &v
}

// GetMagicLinkUrl returns the MagicLinkUrl field value if set, zero value otherwise.
func (o *LinkToken) GetMagicLinkUrl() string {
	if o == nil || o.MagicLinkUrl == nil {
		var ret string
		return ret
	}
	return *o.MagicLinkUrl
}

// GetMagicLinkUrlOk returns a tuple with the MagicLinkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkToken) GetMagicLinkUrlOk() (*string, bool) {
	if o == nil || o.MagicLinkUrl == nil {
		return nil, false
	}
	return o.MagicLinkUrl, true
}

// HasMagicLinkUrl returns a boolean if a field has been set.
func (o *LinkToken) HasMagicLinkUrl() bool {
	if o != nil && o.MagicLinkUrl != nil {
		return true
	}

	return false
}

// SetMagicLinkUrl gets a reference to the given string and assigns it to the MagicLinkUrl field.
func (o *LinkToken) SetMagicLinkUrl(v string) {
	o.MagicLinkUrl = &v
}

func (o LinkToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["link_token"] = o.LinkToken
	}
	if o.IntegrationName != nil {
		toSerialize["integration_name"] = o.IntegrationName
	}
	if o.MagicLinkUrl != nil {
		toSerialize["magic_link_url"] = o.MagicLinkUrl
	}
	return json.Marshal(toSerialize)
}

func (v *LinkToken) UnmarshalJSON(src []byte) error {
    type LinkTokenUnmarshalTarget LinkToken

	var intermediateResult LinkTokenUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = LinkToken(intermediateResult)
	return nil
}
type NullableLinkToken struct {
	value *LinkToken
	isSet bool
}

func (v NullableLinkToken) Get() *LinkToken {
	return v.value
}

func (v *NullableLinkToken) Set(val *LinkToken) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkToken) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkToken(val *LinkToken) *NullableLinkToken {
	return &NullableLinkToken{value: val, isSet: true}
}

func (v NullableLinkToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


