/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"time"
)

// EmployeeRequest # The Employee Object ### Description The `Employee` object is used to represent an Employee for a company.  ### Usage Example Fetch from the `LIST Employee` endpoint and filter by `ID` to show all employees.
type EmployeeRequest struct {
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	// The employee's number that appears in the remote UI. Note: This is distinct from the remote_id field, which is a unique identifier for the employee set by the remote API, and is not exposed to the user. This value can also change in many API providers.
	EmployeeNumber NullableString `json:"employee_number,omitempty"`
	Company NullableString `json:"company,omitempty"`
	// The employee's first name.
	FirstName NullableString `json:"first_name,omitempty"`
	// The employee's last name.
	LastName NullableString `json:"last_name,omitempty"`
	// The employee's full name, to use for display purposes. If a preferred first name is available, the full name will include the preferred first name.
	DisplayFullName NullableString `json:"display_full_name,omitempty"`
	// The employee's username that appears in the remote UI.
	Username NullableString `json:"username,omitempty"`
	Groups *[]string `json:"groups,omitempty"`
	// The employee's work email.
	WorkEmail NullableString `json:"work_email,omitempty"`
	// The employee's personal email.
	PersonalEmail NullableString `json:"personal_email,omitempty"`
	// The employee's mobile phone number.
	MobilePhoneNumber NullableString `json:"mobile_phone_number,omitempty"`
	// Array of `Employment` IDs for this Employee.
	Employments *[]string `json:"employments,omitempty"`
	HomeLocation NullableString `json:"home_location,omitempty"`
	WorkLocation NullableString `json:"work_location,omitempty"`
	Manager NullableString `json:"manager,omitempty"`
	Team NullableString `json:"team,omitempty"`
	PayGroup NullableString `json:"pay_group,omitempty"`
	// The employee's social security number.
	Ssn NullableString `json:"ssn,omitempty"`
	// The employee's gender.
	Gender NullableGenderEnum `json:"gender,omitempty"`
	// The employee's ethnicity.
	Ethnicity NullableEthnicityEnum `json:"ethnicity,omitempty"`
	// The employee's marital status.
	MaritalStatus NullableMaritalStatusEnum `json:"marital_status,omitempty"`
	// The employee's date of birth.
	DateOfBirth NullableTime `json:"date_of_birth,omitempty"`
	// The date that the employee was hired, usually the day that an offer letter is signed. If an employee has multiple hire dates from previous employments, this represents the most recent hire date. Note: If you're looking for the employee's start date, refer to the start_date field.
	HireDate NullableTime `json:"hire_date,omitempty"`
	// The date that the employee started working. If an employee has multiple start dates from previous employments, this represents the most recent start date.
	StartDate NullableTime `json:"start_date,omitempty"`
	// When the third party's employee was created.
	RemoteCreatedAt NullableTime `json:"remote_created_at,omitempty"`
	// The employment status of the employee.
	EmploymentStatus NullableEmploymentStatusEnum `json:"employment_status,omitempty"`
	// The employee's termination date.
	TerminationDate NullableTime `json:"termination_date,omitempty"`
	// The URL of the employee's avatar image.
	Avatar NullableString `json:"avatar,omitempty"`
	// Custom fields configured for a given model.
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
    // raw json response by property name
    ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewEmployeeRequest instantiates a new EmployeeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployeeRequest() *EmployeeRequest {
	this := EmployeeRequest{}
	return &this
}

// NewEmployeeRequestWithDefaults instantiates a new EmployeeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeeRequestWithDefaults() *EmployeeRequest {
	this := EmployeeRequest{}
	return &this
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *EmployeeRequest) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *EmployeeRequest) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *EmployeeRequest) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *EmployeeRequest) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetEmployeeNumber returns the EmployeeNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetEmployeeNumber() string {
	if o == nil || o.EmployeeNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmployeeNumber.Get()
}

// GetEmployeeNumberOk returns a tuple with the EmployeeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetEmployeeNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeeNumber.Get(), o.EmployeeNumber.IsSet()
}

// HasEmployeeNumber returns a boolean if a field has been set.
func (o *EmployeeRequest) HasEmployeeNumber() bool {
	if o != nil && o.EmployeeNumber.IsSet() {
		return true
	}

	return false
}

// SetEmployeeNumber gets a reference to the given NullableString and assigns it to the EmployeeNumber field.
func (o *EmployeeRequest) SetEmployeeNumber(v string) {
	o.EmployeeNumber.Set(&v)
}
// SetEmployeeNumberNil sets the value for EmployeeNumber to be an explicit nil
func (o *EmployeeRequest) SetEmployeeNumberNil() {
	o.EmployeeNumber.Set(nil)
}

// UnsetEmployeeNumber ensures that no value is present for EmployeeNumber, not even an explicit nil
func (o *EmployeeRequest) UnsetEmployeeNumber() {
	o.EmployeeNumber.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetCompany() string {
	if o == nil || o.Company.Get() == nil {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *EmployeeRequest) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *EmployeeRequest) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *EmployeeRequest) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *EmployeeRequest) UnsetCompany() {
	o.Company.Unset()
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetFirstName() string {
	if o == nil || o.FirstName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetFirstNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *EmployeeRequest) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *EmployeeRequest) SetFirstName(v string) {
	o.FirstName.Set(&v)
}
// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *EmployeeRequest) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *EmployeeRequest) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetLastName() string {
	if o == nil || o.LastName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetLastNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *EmployeeRequest) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *EmployeeRequest) SetLastName(v string) {
	o.LastName.Set(&v)
}
// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *EmployeeRequest) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *EmployeeRequest) UnsetLastName() {
	o.LastName.Unset()
}

// GetDisplayFullName returns the DisplayFullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetDisplayFullName() string {
	if o == nil || o.DisplayFullName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayFullName.Get()
}

// GetDisplayFullNameOk returns a tuple with the DisplayFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetDisplayFullNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayFullName.Get(), o.DisplayFullName.IsSet()
}

// HasDisplayFullName returns a boolean if a field has been set.
func (o *EmployeeRequest) HasDisplayFullName() bool {
	if o != nil && o.DisplayFullName.IsSet() {
		return true
	}

	return false
}

// SetDisplayFullName gets a reference to the given NullableString and assigns it to the DisplayFullName field.
func (o *EmployeeRequest) SetDisplayFullName(v string) {
	o.DisplayFullName.Set(&v)
}
// SetDisplayFullNameNil sets the value for DisplayFullName to be an explicit nil
func (o *EmployeeRequest) SetDisplayFullNameNil() {
	o.DisplayFullName.Set(nil)
}

// UnsetDisplayFullName ensures that no value is present for DisplayFullName, not even an explicit nil
func (o *EmployeeRequest) UnsetDisplayFullName() {
	o.DisplayFullName.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *EmployeeRequest) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *EmployeeRequest) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *EmployeeRequest) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *EmployeeRequest) UnsetUsername() {
	o.Username.Unset()
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *EmployeeRequest) GetGroups() []string {
	if o == nil || o.Groups == nil {
		var ret []string
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeRequest) GetGroupsOk() (*[]string, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *EmployeeRequest) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *EmployeeRequest) SetGroups(v []string) {
	o.Groups = &v
}

// GetWorkEmail returns the WorkEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetWorkEmail() string {
	if o == nil || o.WorkEmail.Get() == nil {
		var ret string
		return ret
	}
	return *o.WorkEmail.Get()
}

// GetWorkEmailOk returns a tuple with the WorkEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetWorkEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WorkEmail.Get(), o.WorkEmail.IsSet()
}

// HasWorkEmail returns a boolean if a field has been set.
func (o *EmployeeRequest) HasWorkEmail() bool {
	if o != nil && o.WorkEmail.IsSet() {
		return true
	}

	return false
}

// SetWorkEmail gets a reference to the given NullableString and assigns it to the WorkEmail field.
func (o *EmployeeRequest) SetWorkEmail(v string) {
	o.WorkEmail.Set(&v)
}
// SetWorkEmailNil sets the value for WorkEmail to be an explicit nil
func (o *EmployeeRequest) SetWorkEmailNil() {
	o.WorkEmail.Set(nil)
}

// UnsetWorkEmail ensures that no value is present for WorkEmail, not even an explicit nil
func (o *EmployeeRequest) UnsetWorkEmail() {
	o.WorkEmail.Unset()
}

// GetPersonalEmail returns the PersonalEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetPersonalEmail() string {
	if o == nil || o.PersonalEmail.Get() == nil {
		var ret string
		return ret
	}
	return *o.PersonalEmail.Get()
}

// GetPersonalEmailOk returns a tuple with the PersonalEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetPersonalEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersonalEmail.Get(), o.PersonalEmail.IsSet()
}

// HasPersonalEmail returns a boolean if a field has been set.
func (o *EmployeeRequest) HasPersonalEmail() bool {
	if o != nil && o.PersonalEmail.IsSet() {
		return true
	}

	return false
}

// SetPersonalEmail gets a reference to the given NullableString and assigns it to the PersonalEmail field.
func (o *EmployeeRequest) SetPersonalEmail(v string) {
	o.PersonalEmail.Set(&v)
}
// SetPersonalEmailNil sets the value for PersonalEmail to be an explicit nil
func (o *EmployeeRequest) SetPersonalEmailNil() {
	o.PersonalEmail.Set(nil)
}

// UnsetPersonalEmail ensures that no value is present for PersonalEmail, not even an explicit nil
func (o *EmployeeRequest) UnsetPersonalEmail() {
	o.PersonalEmail.Unset()
}

// GetMobilePhoneNumber returns the MobilePhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetMobilePhoneNumber() string {
	if o == nil || o.MobilePhoneNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.MobilePhoneNumber.Get()
}

// GetMobilePhoneNumberOk returns a tuple with the MobilePhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetMobilePhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MobilePhoneNumber.Get(), o.MobilePhoneNumber.IsSet()
}

// HasMobilePhoneNumber returns a boolean if a field has been set.
func (o *EmployeeRequest) HasMobilePhoneNumber() bool {
	if o != nil && o.MobilePhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetMobilePhoneNumber gets a reference to the given NullableString and assigns it to the MobilePhoneNumber field.
func (o *EmployeeRequest) SetMobilePhoneNumber(v string) {
	o.MobilePhoneNumber.Set(&v)
}
// SetMobilePhoneNumberNil sets the value for MobilePhoneNumber to be an explicit nil
func (o *EmployeeRequest) SetMobilePhoneNumberNil() {
	o.MobilePhoneNumber.Set(nil)
}

// UnsetMobilePhoneNumber ensures that no value is present for MobilePhoneNumber, not even an explicit nil
func (o *EmployeeRequest) UnsetMobilePhoneNumber() {
	o.MobilePhoneNumber.Unset()
}

// GetEmployments returns the Employments field value if set, zero value otherwise.
func (o *EmployeeRequest) GetEmployments() []string {
	if o == nil || o.Employments == nil {
		var ret []string
		return ret
	}
	return *o.Employments
}

// GetEmploymentsOk returns a tuple with the Employments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeRequest) GetEmploymentsOk() (*[]string, bool) {
	if o == nil || o.Employments == nil {
		return nil, false
	}
	return o.Employments, true
}

// HasEmployments returns a boolean if a field has been set.
func (o *EmployeeRequest) HasEmployments() bool {
	if o != nil && o.Employments != nil {
		return true
	}

	return false
}

// SetEmployments gets a reference to the given []string and assigns it to the Employments field.
func (o *EmployeeRequest) SetEmployments(v []string) {
	o.Employments = &v
}

// GetHomeLocation returns the HomeLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetHomeLocation() string {
	if o == nil || o.HomeLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.HomeLocation.Get()
}

// GetHomeLocationOk returns a tuple with the HomeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetHomeLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HomeLocation.Get(), o.HomeLocation.IsSet()
}

// HasHomeLocation returns a boolean if a field has been set.
func (o *EmployeeRequest) HasHomeLocation() bool {
	if o != nil && o.HomeLocation.IsSet() {
		return true
	}

	return false
}

// SetHomeLocation gets a reference to the given NullableString and assigns it to the HomeLocation field.
func (o *EmployeeRequest) SetHomeLocation(v string) {
	o.HomeLocation.Set(&v)
}
// SetHomeLocationNil sets the value for HomeLocation to be an explicit nil
func (o *EmployeeRequest) SetHomeLocationNil() {
	o.HomeLocation.Set(nil)
}

// UnsetHomeLocation ensures that no value is present for HomeLocation, not even an explicit nil
func (o *EmployeeRequest) UnsetHomeLocation() {
	o.HomeLocation.Unset()
}

// GetWorkLocation returns the WorkLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetWorkLocation() string {
	if o == nil || o.WorkLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.WorkLocation.Get()
}

// GetWorkLocationOk returns a tuple with the WorkLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetWorkLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WorkLocation.Get(), o.WorkLocation.IsSet()
}

// HasWorkLocation returns a boolean if a field has been set.
func (o *EmployeeRequest) HasWorkLocation() bool {
	if o != nil && o.WorkLocation.IsSet() {
		return true
	}

	return false
}

// SetWorkLocation gets a reference to the given NullableString and assigns it to the WorkLocation field.
func (o *EmployeeRequest) SetWorkLocation(v string) {
	o.WorkLocation.Set(&v)
}
// SetWorkLocationNil sets the value for WorkLocation to be an explicit nil
func (o *EmployeeRequest) SetWorkLocationNil() {
	o.WorkLocation.Set(nil)
}

// UnsetWorkLocation ensures that no value is present for WorkLocation, not even an explicit nil
func (o *EmployeeRequest) UnsetWorkLocation() {
	o.WorkLocation.Unset()
}

// GetManager returns the Manager field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetManager() string {
	if o == nil || o.Manager.Get() == nil {
		var ret string
		return ret
	}
	return *o.Manager.Get()
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetManagerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Manager.Get(), o.Manager.IsSet()
}

// HasManager returns a boolean if a field has been set.
func (o *EmployeeRequest) HasManager() bool {
	if o != nil && o.Manager.IsSet() {
		return true
	}

	return false
}

// SetManager gets a reference to the given NullableString and assigns it to the Manager field.
func (o *EmployeeRequest) SetManager(v string) {
	o.Manager.Set(&v)
}
// SetManagerNil sets the value for Manager to be an explicit nil
func (o *EmployeeRequest) SetManagerNil() {
	o.Manager.Set(nil)
}

// UnsetManager ensures that no value is present for Manager, not even an explicit nil
func (o *EmployeeRequest) UnsetManager() {
	o.Manager.Unset()
}

// GetTeam returns the Team field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetTeam() string {
	if o == nil || o.Team.Get() == nil {
		var ret string
		return ret
	}
	return *o.Team.Get()
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetTeamOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Team.Get(), o.Team.IsSet()
}

// HasTeam returns a boolean if a field has been set.
func (o *EmployeeRequest) HasTeam() bool {
	if o != nil && o.Team.IsSet() {
		return true
	}

	return false
}

// SetTeam gets a reference to the given NullableString and assigns it to the Team field.
func (o *EmployeeRequest) SetTeam(v string) {
	o.Team.Set(&v)
}
// SetTeamNil sets the value for Team to be an explicit nil
func (o *EmployeeRequest) SetTeamNil() {
	o.Team.Set(nil)
}

// UnsetTeam ensures that no value is present for Team, not even an explicit nil
func (o *EmployeeRequest) UnsetTeam() {
	o.Team.Unset()
}

// GetPayGroup returns the PayGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetPayGroup() string {
	if o == nil || o.PayGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.PayGroup.Get()
}

// GetPayGroupOk returns a tuple with the PayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetPayGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayGroup.Get(), o.PayGroup.IsSet()
}

// HasPayGroup returns a boolean if a field has been set.
func (o *EmployeeRequest) HasPayGroup() bool {
	if o != nil && o.PayGroup.IsSet() {
		return true
	}

	return false
}

// SetPayGroup gets a reference to the given NullableString and assigns it to the PayGroup field.
func (o *EmployeeRequest) SetPayGroup(v string) {
	o.PayGroup.Set(&v)
}
// SetPayGroupNil sets the value for PayGroup to be an explicit nil
func (o *EmployeeRequest) SetPayGroupNil() {
	o.PayGroup.Set(nil)
}

// UnsetPayGroup ensures that no value is present for PayGroup, not even an explicit nil
func (o *EmployeeRequest) UnsetPayGroup() {
	o.PayGroup.Unset()
}

// GetSsn returns the Ssn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetSsn() string {
	if o == nil || o.Ssn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ssn.Get()
}

// GetSsnOk returns a tuple with the Ssn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetSsnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ssn.Get(), o.Ssn.IsSet()
}

// HasSsn returns a boolean if a field has been set.
func (o *EmployeeRequest) HasSsn() bool {
	if o != nil && o.Ssn.IsSet() {
		return true
	}

	return false
}

// SetSsn gets a reference to the given NullableString and assigns it to the Ssn field.
func (o *EmployeeRequest) SetSsn(v string) {
	o.Ssn.Set(&v)
}
// SetSsnNil sets the value for Ssn to be an explicit nil
func (o *EmployeeRequest) SetSsnNil() {
	o.Ssn.Set(nil)
}

// UnsetSsn ensures that no value is present for Ssn, not even an explicit nil
func (o *EmployeeRequest) UnsetSsn() {
	o.Ssn.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetGender() GenderEnum {
	if o == nil || o.Gender.Get() == nil {
		var ret GenderEnum
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetGenderOk() (*GenderEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *EmployeeRequest) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableGenderEnum and assigns it to the Gender field.
func (o *EmployeeRequest) SetGender(v GenderEnum) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *EmployeeRequest) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *EmployeeRequest) UnsetGender() {
	o.Gender.Unset()
}

// GetEthnicity returns the Ethnicity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetEthnicity() EthnicityEnum {
	if o == nil || o.Ethnicity.Get() == nil {
		var ret EthnicityEnum
		return ret
	}
	return *o.Ethnicity.Get()
}

// GetEthnicityOk returns a tuple with the Ethnicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetEthnicityOk() (*EthnicityEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ethnicity.Get(), o.Ethnicity.IsSet()
}

// HasEthnicity returns a boolean if a field has been set.
func (o *EmployeeRequest) HasEthnicity() bool {
	if o != nil && o.Ethnicity.IsSet() {
		return true
	}

	return false
}

// SetEthnicity gets a reference to the given NullableEthnicityEnum and assigns it to the Ethnicity field.
func (o *EmployeeRequest) SetEthnicity(v EthnicityEnum) {
	o.Ethnicity.Set(&v)
}
// SetEthnicityNil sets the value for Ethnicity to be an explicit nil
func (o *EmployeeRequest) SetEthnicityNil() {
	o.Ethnicity.Set(nil)
}

// UnsetEthnicity ensures that no value is present for Ethnicity, not even an explicit nil
func (o *EmployeeRequest) UnsetEthnicity() {
	o.Ethnicity.Unset()
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetMaritalStatus() MaritalStatusEnum {
	if o == nil || o.MaritalStatus.Get() == nil {
		var ret MaritalStatusEnum
		return ret
	}
	return *o.MaritalStatus.Get()
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetMaritalStatusOk() (*MaritalStatusEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaritalStatus.Get(), o.MaritalStatus.IsSet()
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *EmployeeRequest) HasMaritalStatus() bool {
	if o != nil && o.MaritalStatus.IsSet() {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given NullableMaritalStatusEnum and assigns it to the MaritalStatus field.
func (o *EmployeeRequest) SetMaritalStatus(v MaritalStatusEnum) {
	o.MaritalStatus.Set(&v)
}
// SetMaritalStatusNil sets the value for MaritalStatus to be an explicit nil
func (o *EmployeeRequest) SetMaritalStatusNil() {
	o.MaritalStatus.Set(nil)
}

// UnsetMaritalStatus ensures that no value is present for MaritalStatus, not even an explicit nil
func (o *EmployeeRequest) UnsetMaritalStatus() {
	o.MaritalStatus.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetDateOfBirth() time.Time {
	if o == nil || o.DateOfBirth.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetDateOfBirthOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *EmployeeRequest) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableTime and assigns it to the DateOfBirth field.
func (o *EmployeeRequest) SetDateOfBirth(v time.Time) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *EmployeeRequest) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *EmployeeRequest) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetHireDate returns the HireDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetHireDate() time.Time {
	if o == nil || o.HireDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.HireDate.Get()
}

// GetHireDateOk returns a tuple with the HireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetHireDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HireDate.Get(), o.HireDate.IsSet()
}

// HasHireDate returns a boolean if a field has been set.
func (o *EmployeeRequest) HasHireDate() bool {
	if o != nil && o.HireDate.IsSet() {
		return true
	}

	return false
}

// SetHireDate gets a reference to the given NullableTime and assigns it to the HireDate field.
func (o *EmployeeRequest) SetHireDate(v time.Time) {
	o.HireDate.Set(&v)
}
// SetHireDateNil sets the value for HireDate to be an explicit nil
func (o *EmployeeRequest) SetHireDateNil() {
	o.HireDate.Set(nil)
}

// UnsetHireDate ensures that no value is present for HireDate, not even an explicit nil
func (o *EmployeeRequest) UnsetHireDate() {
	o.HireDate.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *EmployeeRequest) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *EmployeeRequest) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *EmployeeRequest) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *EmployeeRequest) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetRemoteCreatedAt returns the RemoteCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetRemoteCreatedAt() time.Time {
	if o == nil || o.RemoteCreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RemoteCreatedAt.Get()
}

// GetRemoteCreatedAtOk returns a tuple with the RemoteCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetRemoteCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteCreatedAt.Get(), o.RemoteCreatedAt.IsSet()
}

// HasRemoteCreatedAt returns a boolean if a field has been set.
func (o *EmployeeRequest) HasRemoteCreatedAt() bool {
	if o != nil && o.RemoteCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetRemoteCreatedAt gets a reference to the given NullableTime and assigns it to the RemoteCreatedAt field.
func (o *EmployeeRequest) SetRemoteCreatedAt(v time.Time) {
	o.RemoteCreatedAt.Set(&v)
}
// SetRemoteCreatedAtNil sets the value for RemoteCreatedAt to be an explicit nil
func (o *EmployeeRequest) SetRemoteCreatedAtNil() {
	o.RemoteCreatedAt.Set(nil)
}

// UnsetRemoteCreatedAt ensures that no value is present for RemoteCreatedAt, not even an explicit nil
func (o *EmployeeRequest) UnsetRemoteCreatedAt() {
	o.RemoteCreatedAt.Unset()
}

// GetEmploymentStatus returns the EmploymentStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetEmploymentStatus() EmploymentStatusEnum {
	if o == nil || o.EmploymentStatus.Get() == nil {
		var ret EmploymentStatusEnum
		return ret
	}
	return *o.EmploymentStatus.Get()
}

// GetEmploymentStatusOk returns a tuple with the EmploymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetEmploymentStatusOk() (*EmploymentStatusEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmploymentStatus.Get(), o.EmploymentStatus.IsSet()
}

// HasEmploymentStatus returns a boolean if a field has been set.
func (o *EmployeeRequest) HasEmploymentStatus() bool {
	if o != nil && o.EmploymentStatus.IsSet() {
		return true
	}

	return false
}

// SetEmploymentStatus gets a reference to the given NullableEmploymentStatusEnum and assigns it to the EmploymentStatus field.
func (o *EmployeeRequest) SetEmploymentStatus(v EmploymentStatusEnum) {
	o.EmploymentStatus.Set(&v)
}
// SetEmploymentStatusNil sets the value for EmploymentStatus to be an explicit nil
func (o *EmployeeRequest) SetEmploymentStatusNil() {
	o.EmploymentStatus.Set(nil)
}

// UnsetEmploymentStatus ensures that no value is present for EmploymentStatus, not even an explicit nil
func (o *EmployeeRequest) UnsetEmploymentStatus() {
	o.EmploymentStatus.Unset()
}

// GetTerminationDate returns the TerminationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetTerminationDate() time.Time {
	if o == nil || o.TerminationDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TerminationDate.Get()
}

// GetTerminationDateOk returns a tuple with the TerminationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetTerminationDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TerminationDate.Get(), o.TerminationDate.IsSet()
}

// HasTerminationDate returns a boolean if a field has been set.
func (o *EmployeeRequest) HasTerminationDate() bool {
	if o != nil && o.TerminationDate.IsSet() {
		return true
	}

	return false
}

// SetTerminationDate gets a reference to the given NullableTime and assigns it to the TerminationDate field.
func (o *EmployeeRequest) SetTerminationDate(v time.Time) {
	o.TerminationDate.Set(&v)
}
// SetTerminationDateNil sets the value for TerminationDate to be an explicit nil
func (o *EmployeeRequest) SetTerminationDateNil() {
	o.TerminationDate.Set(nil)
}

// UnsetTerminationDate ensures that no value is present for TerminationDate, not even an explicit nil
func (o *EmployeeRequest) UnsetTerminationDate() {
	o.TerminationDate.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetAvatar() string {
	if o == nil || o.Avatar.Get() == nil {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetAvatarOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *EmployeeRequest) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *EmployeeRequest) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *EmployeeRequest) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *EmployeeRequest) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeeRequest) GetCustomFields() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeeRequest) GetCustomFieldsOk() (*map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return &o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *EmployeeRequest) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *EmployeeRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o EmployeeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.EmployeeNumber.IsSet() {
		toSerialize["employee_number"] = o.EmployeeNumber.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["first_name"] = o.FirstName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["last_name"] = o.LastName.Get()
	}
	if o.DisplayFullName.IsSet() {
		toSerialize["display_full_name"] = o.DisplayFullName.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.WorkEmail.IsSet() {
		toSerialize["work_email"] = o.WorkEmail.Get()
	}
	if o.PersonalEmail.IsSet() {
		toSerialize["personal_email"] = o.PersonalEmail.Get()
	}
	if o.MobilePhoneNumber.IsSet() {
		toSerialize["mobile_phone_number"] = o.MobilePhoneNumber.Get()
	}
	if o.Employments != nil {
		toSerialize["employments"] = o.Employments
	}
	if o.HomeLocation.IsSet() {
		toSerialize["home_location"] = o.HomeLocation.Get()
	}
	if o.WorkLocation.IsSet() {
		toSerialize["work_location"] = o.WorkLocation.Get()
	}
	if o.Manager.IsSet() {
		toSerialize["manager"] = o.Manager.Get()
	}
	if o.Team.IsSet() {
		toSerialize["team"] = o.Team.Get()
	}
	if o.PayGroup.IsSet() {
		toSerialize["pay_group"] = o.PayGroup.Get()
	}
	if o.Ssn.IsSet() {
		toSerialize["ssn"] = o.Ssn.Get()
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.Ethnicity.IsSet() {
		toSerialize["ethnicity"] = o.Ethnicity.Get()
	}
	if o.MaritalStatus.IsSet() {
		toSerialize["marital_status"] = o.MaritalStatus.Get()
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["date_of_birth"] = o.DateOfBirth.Get()
	}
	if o.HireDate.IsSet() {
		toSerialize["hire_date"] = o.HireDate.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.RemoteCreatedAt.IsSet() {
		toSerialize["remote_created_at"] = o.RemoteCreatedAt.Get()
	}
	if o.EmploymentStatus.IsSet() {
		toSerialize["employment_status"] = o.EmploymentStatus.Get()
	}
	if o.TerminationDate.IsSet() {
		toSerialize["termination_date"] = o.TerminationDate.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return json.Marshal(toSerialize)
}

func (v *EmployeeRequest) UnmarshalJSON(src []byte) error {
    type EmployeeRequestUnmarshalTarget EmployeeRequest

	var intermediateResult EmployeeRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = EmployeeRequest(intermediateResult)
	return nil
}
type NullableEmployeeRequest struct {
	value *EmployeeRequest
	isSet bool
}

func (v NullableEmployeeRequest) Get() *EmployeeRequest {
	return v.value
}

func (v *NullableEmployeeRequest) Set(val *EmployeeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployeeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployeeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployeeRequest(val *EmployeeRequest) *NullableEmployeeRequest {
	return &NullableEmployeeRequest{value: val, isSet: true}
}

func (v NullableEmployeeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployeeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


