/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// CategoryEnum the model 'CategoryEnum'
type CategoryEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of CategoryEnum
const (
    CATEGORYENUM_MERGE_NONSTANDARD_VALUE CategoryEnum = "MERGE_NONSTANDARD_VALUE"
    
	CATEGORYENUM_HRIS CategoryEnum = "hris"
	CATEGORYENUM_ATS CategoryEnum = "ats"
	CATEGORYENUM_ACCOUNTING CategoryEnum = "accounting"
	CATEGORYENUM_TICKETING CategoryEnum = "ticketing"
	CATEGORYENUM_CRM CategoryEnum = "crm"
)

var allowedCategoryEnumEnumValues = []CategoryEnum{
	"hris",
	"ats",
	"accounting",
	"ticketing",
	"crm",
}

func (v *CategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoryEnum(value)
	for _, existing := range allowedCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = CATEGORYENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewCategoryEnumFromValue returns a pointer to a valid CategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoryEnumFromValue(v string) (*CategoryEnum, error) {
	ev := CategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := CATEGORYENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoryEnum) IsValid() bool {
	for _, existing := range allowedCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryEnum value
func (v CategoryEnum) Ptr() *CategoryEnum {
	return &v
}

type NullableCategoryEnum struct {
	value *CategoryEnum
	isSet bool
}

func (v NullableCategoryEnum) Get() *CategoryEnum {
	return v.value
}

func (v *NullableCategoryEnum) Set(val *CategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryEnum(val *CategoryEnum) *NullableCategoryEnum {
	return &NullableCategoryEnum{value: val, isSet: true}
}

func (v NullableCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

