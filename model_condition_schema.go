/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// ConditionSchema struct for ConditionSchema
type ConditionSchema struct {
	// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
	Id string `json:"id"`
	// The common model for which a condition schema is defined.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. \"Skip Manager\".
	NativeName NullableString `json:"native_name"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\".
	FieldName NullableString `json:"field_name"`
	// Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
	// The type of value(s) that can be set for this condition.  * `BOOLEAN` - BOOLEAN * `DATE` - DATE * `DATE_TIME` - DATE_TIME * `INTEGER` - INTEGER * `FLOAT` - FLOAT * `STRING` - STRING * `LIST_OF_STRINGS` - LIST_OF_STRINGS
	ConditionType ConditionTypeEnum `json:"condition_type"`
	// The schemas for the operators that can be used on a condition.
	Operators []OperatorSchema `json:"operators"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewConditionSchema instantiates a new ConditionSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionSchema(id string, nativeName NullableString, fieldName NullableString, conditionType ConditionTypeEnum, operators []OperatorSchema) *ConditionSchema {
	this := ConditionSchema{}
	this.Id = id
	this.NativeName = nativeName
	this.FieldName = fieldName
	this.ConditionType = conditionType
	this.Operators = operators
	return &this
}

// NewConditionSchemaWithDefaults instantiates a new ConditionSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionSchemaWithDefaults() *ConditionSchema {
	this := ConditionSchema{}
	return &this
}

// GetId returns the Id field value
func (o *ConditionSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConditionSchema) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConditionSchema) SetId(v string) {
	o.Id = v
}

// GetCommonModel returns the CommonModel field value if set, zero value otherwise.
func (o *ConditionSchema) GetCommonModel() string {
	if o == nil || o.CommonModel == nil {
		var ret string
		return ret
	}
	return *o.CommonModel
}

// GetCommonModelOk returns a tuple with the CommonModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSchema) GetCommonModelOk() (*string, bool) {
	if o == nil || o.CommonModel == nil {
		return nil, false
	}
	return o.CommonModel, true
}

// HasCommonModel returns a boolean if a field has been set.
func (o *ConditionSchema) HasCommonModel() bool {
	if o != nil && o.CommonModel != nil {
		return true
	}

	return false
}

// SetCommonModel gets a reference to the given string and assigns it to the CommonModel field.
func (o *ConditionSchema) SetCommonModel(v string) {
	o.CommonModel = &v
}

// GetNativeName returns the NativeName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConditionSchema) GetNativeName() string {
	if o == nil || o.NativeName.Get() == nil {
		var ret string
		return ret
	}

	return *o.NativeName.Get()
}

// GetNativeNameOk returns a tuple with the NativeName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConditionSchema) GetNativeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NativeName.Get(), o.NativeName.IsSet()
}

// SetNativeName sets field value
func (o *ConditionSchema) SetNativeName(v string) {
	o.NativeName.Set(&v)
}

// GetFieldName returns the FieldName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConditionSchema) GetFieldName() string {
	if o == nil || o.FieldName.Get() == nil {
		var ret string
		return ret
	}

	return *o.FieldName.Get()
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConditionSchema) GetFieldNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldName.Get(), o.FieldName.IsSet()
}

// SetFieldName sets field value
func (o *ConditionSchema) SetFieldName(v string) {
	o.FieldName.Set(&v)
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *ConditionSchema) GetIsUnique() bool {
	if o == nil || o.IsUnique == nil {
		var ret bool
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSchema) GetIsUniqueOk() (*bool, bool) {
	if o == nil || o.IsUnique == nil {
		return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *ConditionSchema) HasIsUnique() bool {
	if o != nil && o.IsUnique != nil {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given bool and assigns it to the IsUnique field.
func (o *ConditionSchema) SetIsUnique(v bool) {
	o.IsUnique = &v
}

// GetConditionType returns the ConditionType field value
func (o *ConditionSchema) GetConditionType() ConditionTypeEnum {
	if o == nil {
		var ret ConditionTypeEnum
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *ConditionSchema) GetConditionTypeOk() (*ConditionTypeEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *ConditionSchema) SetConditionType(v ConditionTypeEnum) {
	o.ConditionType = v
}

// GetOperators returns the Operators field value
func (o *ConditionSchema) GetOperators() []OperatorSchema {
	if o == nil {
		var ret []OperatorSchema
		return ret
	}

	return o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value
// and a boolean to check if the value has been set.
func (o *ConditionSchema) GetOperatorsOk() (*[]OperatorSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operators, true
}

// SetOperators sets field value
func (o *ConditionSchema) SetOperators(v []OperatorSchema) {
	o.Operators = v
}

func (o ConditionSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CommonModel != nil {
		toSerialize["common_model"] = o.CommonModel
	}
	if true {
		toSerialize["native_name"] = o.NativeName.Get()
	}
	if true {
		toSerialize["field_name"] = o.FieldName.Get()
	}
	if o.IsUnique != nil {
		toSerialize["is_unique"] = o.IsUnique
	}
	if true {
		toSerialize["condition_type"] = o.ConditionType
	}
	if true {
		toSerialize["operators"] = o.Operators
	}
	return json.Marshal(toSerialize)
}

func (v *ConditionSchema) UnmarshalJSON(src []byte) error {
    type ConditionSchemaUnmarshalTarget ConditionSchema

	var intermediateResult ConditionSchemaUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = ConditionSchema(intermediateResult)
	return nil
}
type NullableConditionSchema struct {
	value *ConditionSchema
	isSet bool
}

func (v NullableConditionSchema) Get() *ConditionSchema {
	return v.value
}

func (v *NullableConditionSchema) Set(val *ConditionSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionSchema(val *ConditionSchema) *NullableConditionSchema {
	return &NullableConditionSchema{value: val, isSet: true}
}

func (v NullableConditionSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


