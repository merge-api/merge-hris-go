/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// LinkedAccountsApiService LinkedAccountsApi service
type LinkedAccountsApiService service

type ApiLinkedAccountsListRequest struct {
	ctx _context.Context
	ApiService *LinkedAccountsApiService
	category *string
	cursor *string
	endUserEmailAddress *string
	endUserOrganizationName *string
	endUserOriginId *string
	endUserOriginIds *string
	id *string
	ids *string
	integrationName *string
	isTestAccount *string
	pageSize *int32
	status *string
}

func (r ApiLinkedAccountsListRequest) Category(category string) ApiLinkedAccountsListRequest {
	r.category = &category
	return r
}
func (r ApiLinkedAccountsListRequest) Cursor(cursor string) ApiLinkedAccountsListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiLinkedAccountsListRequest) EndUserEmailAddress(endUserEmailAddress string) ApiLinkedAccountsListRequest {
	r.endUserEmailAddress = &endUserEmailAddress
	return r
}
func (r ApiLinkedAccountsListRequest) EndUserOrganizationName(endUserOrganizationName string) ApiLinkedAccountsListRequest {
	r.endUserOrganizationName = &endUserOrganizationName
	return r
}
func (r ApiLinkedAccountsListRequest) EndUserOriginId(endUserOriginId string) ApiLinkedAccountsListRequest {
	r.endUserOriginId = &endUserOriginId
	return r
}
func (r ApiLinkedAccountsListRequest) EndUserOriginIds(endUserOriginIds string) ApiLinkedAccountsListRequest {
	r.endUserOriginIds = &endUserOriginIds
	return r
}
func (r ApiLinkedAccountsListRequest) Id(id string) ApiLinkedAccountsListRequest {
	r.id = &id
	return r
}
func (r ApiLinkedAccountsListRequest) Ids(ids string) ApiLinkedAccountsListRequest {
	r.ids = &ids
	return r
}
func (r ApiLinkedAccountsListRequest) IntegrationName(integrationName string) ApiLinkedAccountsListRequest {
	r.integrationName = &integrationName
	return r
}
func (r ApiLinkedAccountsListRequest) IsTestAccount(isTestAccount string) ApiLinkedAccountsListRequest {
	r.isTestAccount = &isTestAccount
	return r
}
func (r ApiLinkedAccountsListRequest) PageSize(pageSize int32) ApiLinkedAccountsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiLinkedAccountsListRequest) Status(status string) ApiLinkedAccountsListRequest {
	r.status = &status
	return r
}

func (r ApiLinkedAccountsListRequest) Execute() (PaginatedAccountDetailsAndActionsList, *_nethttp.Response, error) {
	return r.ApiService.LinkedAccountsListExecute(r)
}

/*
 * LinkedAccountsList Method for LinkedAccountsList
 * List linked accounts for your organization.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiLinkedAccountsListRequest
 */
func (a *LinkedAccountsApiService) LinkedAccountsList(ctx _context.Context) ApiLinkedAccountsListRequest {
	return ApiLinkedAccountsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedAccountDetailsAndActionsList
 */
func (a *LinkedAccountsApiService) LinkedAccountsListExecute(r ApiLinkedAccountsListRequest) (PaginatedAccountDetailsAndActionsList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedAccountDetailsAndActionsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinkedAccountsApiService.LinkedAccountsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/linked-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.category != nil {
		localVarQueryParams.Add("category", parameterToString(*r.category, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.endUserEmailAddress != nil {
		localVarQueryParams.Add("end_user_email_address", parameterToString(*r.endUserEmailAddress, ""))
	}
	if r.endUserOrganizationName != nil {
		localVarQueryParams.Add("end_user_organization_name", parameterToString(*r.endUserOrganizationName, ""))
	}
	if r.endUserOriginId != nil {
		localVarQueryParams.Add("end_user_origin_id", parameterToString(*r.endUserOriginId, ""))
	}
	if r.endUserOriginIds != nil {
		localVarQueryParams.Add("end_user_origin_ids", parameterToString(*r.endUserOriginIds, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.integrationName != nil {
		localVarQueryParams.Add("integration_name", parameterToString(*r.integrationName, ""))
	}
	if r.isTestAccount != nil {
		localVarQueryParams.Add("is_test_account", parameterToString(*r.isTestAccount, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
