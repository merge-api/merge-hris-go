/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// SelectiveSyncConfigurationsUsageEnum * `IN_NEXT_SYNC` - IN_NEXT_SYNC * `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of SelectiveSyncConfigurationsUsageEnum
const (
    SELECTIVESYNCCONFIGURATIONSUSAGEENUM_MERGE_NONSTANDARD_VALUE SelectiveSyncConfigurationsUsageEnum = "MERGE_NONSTANDARD_VALUE"
    
	SELECTIVESYNCCONFIGURATIONSUSAGEENUM_NEXT_SYNC SelectiveSyncConfigurationsUsageEnum = "IN_NEXT_SYNC"
	SELECTIVESYNCCONFIGURATIONSUSAGEENUM_LAST_SYNC SelectiveSyncConfigurationsUsageEnum = "IN_LAST_SYNC"
)

var allowedSelectiveSyncConfigurationsUsageEnumEnumValues = []SelectiveSyncConfigurationsUsageEnum{
	"IN_NEXT_SYNC",
	"IN_LAST_SYNC",
}

func (v *SelectiveSyncConfigurationsUsageEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SelectiveSyncConfigurationsUsageEnum(value)
	for _, existing := range allowedSelectiveSyncConfigurationsUsageEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = SELECTIVESYNCCONFIGURATIONSUSAGEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewSelectiveSyncConfigurationsUsageEnumFromValue returns a pointer to a valid SelectiveSyncConfigurationsUsageEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSelectiveSyncConfigurationsUsageEnumFromValue(v string) (*SelectiveSyncConfigurationsUsageEnum, error) {
	ev := SelectiveSyncConfigurationsUsageEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := SELECTIVESYNCCONFIGURATIONSUSAGEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SelectiveSyncConfigurationsUsageEnum) IsValid() bool {
	for _, existing := range allowedSelectiveSyncConfigurationsUsageEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SelectiveSyncConfigurationsUsageEnum value
func (v SelectiveSyncConfigurationsUsageEnum) Ptr() *SelectiveSyncConfigurationsUsageEnum {
	return &v
}

type NullableSelectiveSyncConfigurationsUsageEnum struct {
	value *SelectiveSyncConfigurationsUsageEnum
	isSet bool
}

func (v NullableSelectiveSyncConfigurationsUsageEnum) Get() *SelectiveSyncConfigurationsUsageEnum {
	return v.value
}

func (v *NullableSelectiveSyncConfigurationsUsageEnum) Set(val *SelectiveSyncConfigurationsUsageEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectiveSyncConfigurationsUsageEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectiveSyncConfigurationsUsageEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectiveSyncConfigurationsUsageEnum(val *SelectiveSyncConfigurationsUsageEnum) *NullableSelectiveSyncConfigurationsUsageEnum {
	return &NullableSelectiveSyncConfigurationsUsageEnum{value: val, isSet: true}
}

func (v NullableSelectiveSyncConfigurationsUsageEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectiveSyncConfigurationsUsageEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

