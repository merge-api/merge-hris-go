/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"time"
)

// Employment # The Employment Object ### Description The `Employment` object is used to represent a job position at a company.  Please note: When there is a change in pay or title, integrations with historical data will create new Employment objects while integrations without historical data will update existing ones.  ### Usage Example Fetch from the `LIST Employments` endpoint and filter by `ID` to show all employees.
type Employment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	// The employee holding this position.
	Employee NullableString `json:"employee,omitempty"`
	// The position's title.
	JobTitle NullableString `json:"job_title,omitempty"`
	// The position's pay rate in dollars.
	PayRate NullableFloat64 `json:"pay_rate,omitempty"`
	// The time period this pay rate encompasses.  * `HOUR` - HOUR * `DAY` - DAY * `WEEK` - WEEK * `EVERY_TWO_WEEKS` - EVERY_TWO_WEEKS * `SEMIMONTHLY` - SEMIMONTHLY * `MONTH` - MONTH * `QUARTER` - QUARTER * `EVERY_SIX_MONTHS` - EVERY_SIX_MONTHS * `YEAR` - YEAR
	PayPeriod NullablePayPeriodEnum `json:"pay_period,omitempty"`
	// The position's pay frequency.  * `WEEKLY` - WEEKLY * `BIWEEKLY` - BIWEEKLY * `MONTHLY` - MONTHLY * `QUARTERLY` - QUARTERLY * `SEMIANNUALLY` - SEMIANNUALLY * `ANNUALLY` - ANNUALLY * `THIRTEEN-MONTHLY` - THIRTEEN-MONTHLY * `PRO_RATA` - PRO_RATA * `SEMIMONTHLY` - SEMIMONTHLY
	PayFrequency NullablePayFrequencyEnum `json:"pay_frequency,omitempty"`
	// The position's currency code.  * `XUA` - ADB Unit of Account * `AFN` - Afghan Afghani * `AFA` - Afghan Afghani (1927–2002) * `ALL` - Albanian Lek * `ALK` - Albanian Lek (1946–1965) * `DZD` - Algerian Dinar * `ADP` - Andorran Peseta * `AOA` - Angolan Kwanza * `AOK` - Angolan Kwanza (1977–1991) * `AON` - Angolan New Kwanza (1990–2000) * `AOR` - Angolan Readjusted Kwanza (1995–1999) * `ARA` - Argentine Austral * `ARS` - Argentine Peso * `ARM` - Argentine Peso (1881–1970) * `ARP` - Argentine Peso (1983–1985) * `ARL` - Argentine Peso Ley (1970–1983) * `AMD` - Armenian Dram * `AWG` - Aruban Florin * `AUD` - Australian Dollar * `ATS` - Austrian Schilling * `AZN` - Azerbaijani Manat * `AZM` - Azerbaijani Manat (1993–2006) * `BSD` - Bahamian Dollar * `BHD` - Bahraini Dinar * `BDT` - Bangladeshi Taka * `BBD` - Barbadian Dollar * `BYN` - Belarusian Ruble * `BYB` - Belarusian Ruble (1994–1999) * `BYR` - Belarusian Ruble (2000–2016) * `BEF` - Belgian Franc * `BEC` - Belgian Franc (convertible) * `BEL` - Belgian Franc (financial) * `BZD` - Belize Dollar * `BMD` - Bermudan Dollar * `BTN` - Bhutanese Ngultrum * `BOB` - Bolivian Boliviano * `BOL` - Bolivian Boliviano (1863–1963) * `BOV` - Bolivian Mvdol * `BOP` - Bolivian Peso * `BAM` - Bosnia-Herzegovina Convertible Mark * `BAD` - Bosnia-Herzegovina Dinar (1992–1994) * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997) * `BWP` - Botswanan Pula * `BRC` - Brazilian Cruzado (1986–1989) * `BRZ` - Brazilian Cruzeiro (1942–1967) * `BRE` - Brazilian Cruzeiro (1990–1993) * `BRR` - Brazilian Cruzeiro (1993–1994) * `BRN` - Brazilian New Cruzado (1989–1990) * `BRB` - Brazilian New Cruzeiro (1967–1986) * `BRL` - Brazilian Real * `GBP` - British Pound * `BND` - Brunei Dollar * `BGL` - Bulgarian Hard Lev * `BGN` - Bulgarian Lev * `BGO` - Bulgarian Lev (1879–1952) * `BGM` - Bulgarian Socialist Lev * `BUK` - Burmese Kyat * `BIF` - Burundian Franc * `XPF` - CFP Franc * `KHR` - Cambodian Riel * `CAD` - Canadian Dollar * `CVE` - Cape Verdean Escudo * `KYD` - Cayman Islands Dollar * `XAF` - Central African CFA Franc * `CLE` - Chilean Escudo * `CLP` - Chilean Peso * `CLF` - Chilean Unit of Account (UF) * `CNX` - Chinese People’s Bank Dollar * `CNY` - Chinese Yuan * `CNH` - Chinese Yuan (offshore) * `COP` - Colombian Peso * `COU` - Colombian Real Value Unit * `KMF` - Comorian Franc * `CDF` - Congolese Franc * `CRC` - Costa Rican Colón * `HRD` - Croatian Dinar * `HRK` - Croatian Kuna * `CUC` - Cuban Convertible Peso * `CUP` - Cuban Peso * `CYP` - Cypriot Pound * `CZK` - Czech Koruna * `CSK` - Czechoslovak Hard Koruna * `DKK` - Danish Krone * `DJF` - Djiboutian Franc * `DOP` - Dominican Peso * `NLG` - Dutch Guilder * `XCD` - East Caribbean Dollar * `DDM` - East German Mark * `ECS` - Ecuadorian Sucre * `ECV` - Ecuadorian Unit of Constant Value * `EGP` - Egyptian Pound * `GQE` - Equatorial Guinean Ekwele * `ERN` - Eritrean Nakfa * `EEK` - Estonian Kroon * `ETB` - Ethiopian Birr * `EUR` - Euro * `XBA` - European Composite Unit * `XEU` - European Currency Unit * `XBB` - European Monetary Unit * `XBC` - European Unit of Account (XBC) * `XBD` - European Unit of Account (XBD) * `FKP` - Falkland Islands Pound * `FJD` - Fijian Dollar * `FIM` - Finnish Markka * `FRF` - French Franc * `XFO` - French Gold Franc * `XFU` - French UIC-Franc * `GMD` - Gambian Dalasi * `GEK` - Georgian Kupon Larit * `GEL` - Georgian Lari * `DEM` - German Mark * `GHS` - Ghanaian Cedi * `GHC` - Ghanaian Cedi (1979–2007) * `GIP` - Gibraltar Pound * `XAU` - Gold * `GRD` - Greek Drachma * `GTQ` - Guatemalan Quetzal * `GWP` - Guinea-Bissau Peso * `GNF` - Guinean Franc * `GNS` - Guinean Syli * `GYD` - Guyanaese Dollar * `HTG` - Haitian Gourde * `HNL` - Honduran Lempira * `HKD` - Hong Kong Dollar * `HUF` - Hungarian Forint * `IMP` - IMP * `ISK` - Icelandic Króna * `ISJ` - Icelandic Króna (1918–1981) * `INR` - Indian Rupee * `IDR` - Indonesian Rupiah * `IRR` - Iranian Rial * `IQD` - Iraqi Dinar * `IEP` - Irish Pound * `ILS` - Israeli New Shekel * `ILP` - Israeli Pound * `ILR` - Israeli Shekel (1980–1985) * `ITL` - Italian Lira * `JMD` - Jamaican Dollar * `JPY` - Japanese Yen * `JOD` - Jordanian Dinar * `KZT` - Kazakhstani Tenge * `KES` - Kenyan Shilling * `KWD` - Kuwaiti Dinar * `KGS` - Kyrgystani Som * `LAK` - Laotian Kip * `LVL` - Latvian Lats * `LVR` - Latvian Ruble * `LBP` - Lebanese Pound * `LSL` - Lesotho Loti * `LRD` - Liberian Dollar * `LYD` - Libyan Dinar * `LTL` - Lithuanian Litas * `LTT` - Lithuanian Talonas * `LUL` - Luxembourg Financial Franc * `LUC` - Luxembourgian Convertible Franc * `LUF` - Luxembourgian Franc * `MOP` - Macanese Pataca * `MKD` - Macedonian Denar * `MKN` - Macedonian Denar (1992–1993) * `MGA` - Malagasy Ariary * `MGF` - Malagasy Franc * `MWK` - Malawian Kwacha * `MYR` - Malaysian Ringgit * `MVR` - Maldivian Rufiyaa * `MVP` - Maldivian Rupee (1947–1981) * `MLF` - Malian Franc * `MTL` - Maltese Lira * `MTP` - Maltese Pound * `MRU` - Mauritanian Ouguiya * `MRO` - Mauritanian Ouguiya (1973–2017) * `MUR` - Mauritian Rupee * `MXV` - Mexican Investment Unit * `MXN` - Mexican Peso * `MXP` - Mexican Silver Peso (1861–1992) * `MDC` - Moldovan Cupon * `MDL` - Moldovan Leu * `MCF` - Monegasque Franc * `MNT` - Mongolian Tugrik * `MAD` - Moroccan Dirham * `MAF` - Moroccan Franc * `MZE` - Mozambican Escudo * `MZN` - Mozambican Metical * `MZM` - Mozambican Metical (1980–2006) * `MMK` - Myanmar Kyat * `NAD` - Namibian Dollar * `NPR` - Nepalese Rupee * `ANG` - Netherlands Antillean Guilder * `TWD` - New Taiwan Dollar * `NZD` - New Zealand Dollar * `NIO` - Nicaraguan Córdoba * `NIC` - Nicaraguan Córdoba (1988–1991) * `NGN` - Nigerian Naira * `KPW` - North Korean Won * `NOK` - Norwegian Krone * `OMR` - Omani Rial * `PKR` - Pakistani Rupee * `XPD` - Palladium * `PAB` - Panamanian Balboa * `PGK` - Papua New Guinean Kina * `PYG` - Paraguayan Guarani * `PEI` - Peruvian Inti * `PEN` - Peruvian Sol * `PES` - Peruvian Sol (1863–1965) * `PHP` - Philippine Peso * `XPT` - Platinum * `PLN` - Polish Zloty * `PLZ` - Polish Zloty (1950–1995) * `PTE` - Portuguese Escudo * `GWE` - Portuguese Guinea Escudo * `QAR` - Qatari Rial * `XRE` - RINET Funds * `RHD` - Rhodesian Dollar * `RON` - Romanian Leu * `ROL` - Romanian Leu (1952–2006) * `RUB` - Russian Ruble * `RUR` - Russian Ruble (1991–1998) * `RWF` - Rwandan Franc * `SVC` - Salvadoran Colón * `WST` - Samoan Tala * `SAR` - Saudi Riyal * `RSD` - Serbian Dinar * `CSD` - Serbian Dinar (2002–2006) * `SCR` - Seychellois Rupee * `SLL` - Sierra Leonean Leone * `XAG` - Silver * `SGD` - Singapore Dollar * `SKK` - Slovak Koruna * `SIT` - Slovenian Tolar * `SBD` - Solomon Islands Dollar * `SOS` - Somali Shilling * `ZAR` - South African Rand * `ZAL` - South African Rand (financial) * `KRH` - South Korean Hwan (1953–1962) * `KRW` - South Korean Won * `KRO` - South Korean Won (1945–1953) * `SSP` - South Sudanese Pound * `SUR` - Soviet Rouble * `ESP` - Spanish Peseta * `ESA` - Spanish Peseta (A account) * `ESB` - Spanish Peseta (convertible account) * `XDR` - Special Drawing Rights * `LKR` - Sri Lankan Rupee * `SHP` - St. Helena Pound * `XSU` - Sucre * `SDD` - Sudanese Dinar (1992–2007) * `SDG` - Sudanese Pound * `SDP` - Sudanese Pound (1957–1998) * `SRD` - Surinamese Dollar * `SRG` - Surinamese Guilder * `SZL` - Swazi Lilangeni * `SEK` - Swedish Krona * `CHF` - Swiss Franc * `SYP` - Syrian Pound * `STN` - São Tomé & Príncipe Dobra * `STD` - São Tomé & Príncipe Dobra (1977–2017) * `TVD` - TVD * `TJR` - Tajikistani Ruble * `TJS` - Tajikistani Somoni * `TZS` - Tanzanian Shilling * `XTS` - Testing Currency Code * `THB` - Thai Baht * `XXX` - The codes assigned for transactions where no currency is involved * `TPE` - Timorese Escudo * `TOP` - Tongan Paʻanga * `TTD` - Trinidad & Tobago Dollar * `TND` - Tunisian Dinar * `TRY` - Turkish Lira * `TRL` - Turkish Lira (1922–2005) * `TMT` - Turkmenistani Manat * `TMM` - Turkmenistani Manat (1993–2009) * `USD` - US Dollar * `USN` - US Dollar (Next day) * `USS` - US Dollar (Same day) * `UGX` - Ugandan Shilling * `UGS` - Ugandan Shilling (1966–1987) * `UAH` - Ukrainian Hryvnia * `UAK` - Ukrainian Karbovanets * `AED` - United Arab Emirates Dirham * `UYW` - Uruguayan Nominal Wage Index Unit * `UYU` - Uruguayan Peso * `UYP` - Uruguayan Peso (1975–1993) * `UYI` - Uruguayan Peso (Indexed Units) * `UZS` - Uzbekistani Som * `VUV` - Vanuatu Vatu * `VES` - Venezuelan Bolívar * `VEB` - Venezuelan Bolívar (1871–2008) * `VEF` - Venezuelan Bolívar (2008–2018) * `VND` - Vietnamese Dong * `VNN` - Vietnamese Dong (1978–1985) * `CHE` - WIR Euro * `CHW` - WIR Franc * `XOF` - West African CFA Franc * `YDD` - Yemeni Dinar * `YER` - Yemeni Rial * `YUN` - Yugoslavian Convertible Dinar (1990–1992) * `YUD` - Yugoslavian Hard Dinar (1966–1990) * `YUM` - Yugoslavian New Dinar (1994–2002) * `YUR` - Yugoslavian Reformed Dinar (1992–1993) * `ZWN` - ZWN * `ZRN` - Zairean New Zaire (1993–1998) * `ZRZ` - Zairean Zaire (1971–1993) * `ZMW` - Zambian Kwacha * `ZMK` - Zambian Kwacha (1968–2012) * `ZWD` - Zimbabwean Dollar (1980–2008) * `ZWR` - Zimbabwean Dollar (2008) * `ZWL` - Zimbabwean Dollar (2009)
	PayCurrency NullablePayCurrencyEnum `json:"pay_currency,omitempty"`
	// The employment's pay group
	PayGroup NullableString `json:"pay_group,omitempty"`
	// The position's FLSA status.  * `EXEMPT` - EXEMPT * `SALARIED_NONEXEMPT` - SALARIED_NONEXEMPT * `NONEXEMPT` - NONEXEMPT * `OWNER` - OWNER
	FlsaStatus NullableFlsaStatusEnum `json:"flsa_status,omitempty"`
	// The position's effective date.
	EffectiveDate NullableTime `json:"effective_date,omitempty"`
	// The position's type of employment.  * `FULL_TIME` - FULL_TIME * `PART_TIME` - PART_TIME * `INTERN` - INTERN * `CONTRACTOR` - CONTRACTOR * `FREELANCE` - FREELANCE
	EmploymentType NullableEmploymentTypeEnum `json:"employment_type,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewEmployment instantiates a new Employment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployment() *Employment {
	this := Employment{}
	return &this
}

// NewEmploymentWithDefaults instantiates a new Employment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmploymentWithDefaults() *Employment {
	this := Employment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Employment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Employment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Employment) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *Employment) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *Employment) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *Employment) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *Employment) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetEmployee returns the Employee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetEmployee() string {
	if o == nil || o.Employee.Get() == nil {
		var ret string
		return ret
	}
	return *o.Employee.Get()
}

// GetEmployeeOk returns a tuple with the Employee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetEmployeeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Employee.Get(), o.Employee.IsSet()
}

// HasEmployee returns a boolean if a field has been set.
func (o *Employment) HasEmployee() bool {
	if o != nil && o.Employee.IsSet() {
		return true
	}

	return false
}

// SetEmployee gets a reference to the given NullableString and assigns it to the Employee field.
func (o *Employment) SetEmployee(v string) {
	o.Employee.Set(&v)
}
// SetEmployeeNil sets the value for Employee to be an explicit nil
func (o *Employment) SetEmployeeNil() {
	o.Employee.Set(nil)
}

// UnsetEmployee ensures that no value is present for Employee, not even an explicit nil
func (o *Employment) UnsetEmployee() {
	o.Employee.Unset()
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetJobTitle() string {
	if o == nil || o.JobTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.JobTitle.Get()
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetJobTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobTitle.Get(), o.JobTitle.IsSet()
}

// HasJobTitle returns a boolean if a field has been set.
func (o *Employment) HasJobTitle() bool {
	if o != nil && o.JobTitle.IsSet() {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given NullableString and assigns it to the JobTitle field.
func (o *Employment) SetJobTitle(v string) {
	o.JobTitle.Set(&v)
}
// SetJobTitleNil sets the value for JobTitle to be an explicit nil
func (o *Employment) SetJobTitleNil() {
	o.JobTitle.Set(nil)
}

// UnsetJobTitle ensures that no value is present for JobTitle, not even an explicit nil
func (o *Employment) UnsetJobTitle() {
	o.JobTitle.Unset()
}

// GetPayRate returns the PayRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetPayRate() float64 {
	if o == nil || o.PayRate.Get() == nil {
		var ret float64
		return ret
	}
	return *o.PayRate.Get()
}

// GetPayRateOk returns a tuple with the PayRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetPayRateOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayRate.Get(), o.PayRate.IsSet()
}

// HasPayRate returns a boolean if a field has been set.
func (o *Employment) HasPayRate() bool {
	if o != nil && o.PayRate.IsSet() {
		return true
	}

	return false
}

// SetPayRate gets a reference to the given NullableFloat64 and assigns it to the PayRate field.
func (o *Employment) SetPayRate(v float64) {
	o.PayRate.Set(&v)
}
// SetPayRateNil sets the value for PayRate to be an explicit nil
func (o *Employment) SetPayRateNil() {
	o.PayRate.Set(nil)
}

// UnsetPayRate ensures that no value is present for PayRate, not even an explicit nil
func (o *Employment) UnsetPayRate() {
	o.PayRate.Unset()
}

// GetPayPeriod returns the PayPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetPayPeriod() PayPeriodEnum {
	if o == nil || o.PayPeriod.Get() == nil {
		var ret PayPeriodEnum
		return ret
	}
	return *o.PayPeriod.Get()
}

// GetPayPeriodOk returns a tuple with the PayPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetPayPeriodOk() (*PayPeriodEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayPeriod.Get(), o.PayPeriod.IsSet()
}

// HasPayPeriod returns a boolean if a field has been set.
func (o *Employment) HasPayPeriod() bool {
	if o != nil && o.PayPeriod.IsSet() {
		return true
	}

	return false
}

// SetPayPeriod gets a reference to the given NullablePayPeriodEnum and assigns it to the PayPeriod field.
func (o *Employment) SetPayPeriod(v PayPeriodEnum) {
	o.PayPeriod.Set(&v)
}
// SetPayPeriodNil sets the value for PayPeriod to be an explicit nil
func (o *Employment) SetPayPeriodNil() {
	o.PayPeriod.Set(nil)
}

// UnsetPayPeriod ensures that no value is present for PayPeriod, not even an explicit nil
func (o *Employment) UnsetPayPeriod() {
	o.PayPeriod.Unset()
}

// GetPayFrequency returns the PayFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetPayFrequency() PayFrequencyEnum {
	if o == nil || o.PayFrequency.Get() == nil {
		var ret PayFrequencyEnum
		return ret
	}
	return *o.PayFrequency.Get()
}

// GetPayFrequencyOk returns a tuple with the PayFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetPayFrequencyOk() (*PayFrequencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayFrequency.Get(), o.PayFrequency.IsSet()
}

// HasPayFrequency returns a boolean if a field has been set.
func (o *Employment) HasPayFrequency() bool {
	if o != nil && o.PayFrequency.IsSet() {
		return true
	}

	return false
}

// SetPayFrequency gets a reference to the given NullablePayFrequencyEnum and assigns it to the PayFrequency field.
func (o *Employment) SetPayFrequency(v PayFrequencyEnum) {
	o.PayFrequency.Set(&v)
}
// SetPayFrequencyNil sets the value for PayFrequency to be an explicit nil
func (o *Employment) SetPayFrequencyNil() {
	o.PayFrequency.Set(nil)
}

// UnsetPayFrequency ensures that no value is present for PayFrequency, not even an explicit nil
func (o *Employment) UnsetPayFrequency() {
	o.PayFrequency.Unset()
}

// GetPayCurrency returns the PayCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetPayCurrency() PayCurrencyEnum {
	if o == nil || o.PayCurrency.Get() == nil {
		var ret PayCurrencyEnum
		return ret
	}
	return *o.PayCurrency.Get()
}

// GetPayCurrencyOk returns a tuple with the PayCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetPayCurrencyOk() (*PayCurrencyEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayCurrency.Get(), o.PayCurrency.IsSet()
}

// HasPayCurrency returns a boolean if a field has been set.
func (o *Employment) HasPayCurrency() bool {
	if o != nil && o.PayCurrency.IsSet() {
		return true
	}

	return false
}

// SetPayCurrency gets a reference to the given NullablePayCurrencyEnum and assigns it to the PayCurrency field.
func (o *Employment) SetPayCurrency(v PayCurrencyEnum) {
	o.PayCurrency.Set(&v)
}
// SetPayCurrencyNil sets the value for PayCurrency to be an explicit nil
func (o *Employment) SetPayCurrencyNil() {
	o.PayCurrency.Set(nil)
}

// UnsetPayCurrency ensures that no value is present for PayCurrency, not even an explicit nil
func (o *Employment) UnsetPayCurrency() {
	o.PayCurrency.Unset()
}

// GetPayGroup returns the PayGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetPayGroup() string {
	if o == nil || o.PayGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.PayGroup.Get()
}

// GetPayGroupOk returns a tuple with the PayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetPayGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayGroup.Get(), o.PayGroup.IsSet()
}

// HasPayGroup returns a boolean if a field has been set.
func (o *Employment) HasPayGroup() bool {
	if o != nil && o.PayGroup.IsSet() {
		return true
	}

	return false
}

// SetPayGroup gets a reference to the given NullableString and assigns it to the PayGroup field.
func (o *Employment) SetPayGroup(v string) {
	o.PayGroup.Set(&v)
}
// SetPayGroupNil sets the value for PayGroup to be an explicit nil
func (o *Employment) SetPayGroupNil() {
	o.PayGroup.Set(nil)
}

// UnsetPayGroup ensures that no value is present for PayGroup, not even an explicit nil
func (o *Employment) UnsetPayGroup() {
	o.PayGroup.Unset()
}

// GetFlsaStatus returns the FlsaStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetFlsaStatus() FlsaStatusEnum {
	if o == nil || o.FlsaStatus.Get() == nil {
		var ret FlsaStatusEnum
		return ret
	}
	return *o.FlsaStatus.Get()
}

// GetFlsaStatusOk returns a tuple with the FlsaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetFlsaStatusOk() (*FlsaStatusEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlsaStatus.Get(), o.FlsaStatus.IsSet()
}

// HasFlsaStatus returns a boolean if a field has been set.
func (o *Employment) HasFlsaStatus() bool {
	if o != nil && o.FlsaStatus.IsSet() {
		return true
	}

	return false
}

// SetFlsaStatus gets a reference to the given NullableFlsaStatusEnum and assigns it to the FlsaStatus field.
func (o *Employment) SetFlsaStatus(v FlsaStatusEnum) {
	o.FlsaStatus.Set(&v)
}
// SetFlsaStatusNil sets the value for FlsaStatus to be an explicit nil
func (o *Employment) SetFlsaStatusNil() {
	o.FlsaStatus.Set(nil)
}

// UnsetFlsaStatus ensures that no value is present for FlsaStatus, not even an explicit nil
func (o *Employment) UnsetFlsaStatus() {
	o.FlsaStatus.Unset()
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetEffectiveDate() time.Time {
	if o == nil || o.EffectiveDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate.Get()
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveDate.Get(), o.EffectiveDate.IsSet()
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *Employment) HasEffectiveDate() bool {
	if o != nil && o.EffectiveDate.IsSet() {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given NullableTime and assigns it to the EffectiveDate field.
func (o *Employment) SetEffectiveDate(v time.Time) {
	o.EffectiveDate.Set(&v)
}
// SetEffectiveDateNil sets the value for EffectiveDate to be an explicit nil
func (o *Employment) SetEffectiveDateNil() {
	o.EffectiveDate.Set(nil)
}

// UnsetEffectiveDate ensures that no value is present for EffectiveDate, not even an explicit nil
func (o *Employment) UnsetEffectiveDate() {
	o.EffectiveDate.Unset()
}

// GetEmploymentType returns the EmploymentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetEmploymentType() EmploymentTypeEnum {
	if o == nil || o.EmploymentType.Get() == nil {
		var ret EmploymentTypeEnum
		return ret
	}
	return *o.EmploymentType.Get()
}

// GetEmploymentTypeOk returns a tuple with the EmploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetEmploymentTypeOk() (*EmploymentTypeEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmploymentType.Get(), o.EmploymentType.IsSet()
}

// HasEmploymentType returns a boolean if a field has been set.
func (o *Employment) HasEmploymentType() bool {
	if o != nil && o.EmploymentType.IsSet() {
		return true
	}

	return false
}

// SetEmploymentType gets a reference to the given NullableEmploymentTypeEnum and assigns it to the EmploymentType field.
func (o *Employment) SetEmploymentType(v EmploymentTypeEnum) {
	o.EmploymentType.Set(&v)
}
// SetEmploymentTypeNil sets the value for EmploymentType to be an explicit nil
func (o *Employment) SetEmploymentTypeNil() {
	o.EmploymentType.Set(nil)
}

// UnsetEmploymentType ensures that no value is present for EmploymentType, not even an explicit nil
func (o *Employment) UnsetEmploymentType() {
	o.EmploymentType.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *Employment) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *Employment) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *Employment) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetFieldMappings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetFieldMappingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FieldMappings == nil {
		return nil, false
	}
	return &o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *Employment) HasFieldMappings() bool {
	if o != nil && o.FieldMappings != nil {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given map[string]interface{} and assigns it to the FieldMappings field.
func (o *Employment) SetFieldMappings(v map[string]interface{}) {
	o.FieldMappings = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Employment) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Employment) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Employment) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Employment) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employment) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employment) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *Employment) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *Employment) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

func (o Employment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.Employee.IsSet() {
		toSerialize["employee"] = o.Employee.Get()
	}
	if o.JobTitle.IsSet() {
		toSerialize["job_title"] = o.JobTitle.Get()
	}
	if o.PayRate.IsSet() {
		toSerialize["pay_rate"] = o.PayRate.Get()
	}
	if o.PayPeriod.IsSet() {
		toSerialize["pay_period"] = o.PayPeriod.Get()
	}
	if o.PayFrequency.IsSet() {
		toSerialize["pay_frequency"] = o.PayFrequency.Get()
	}
	if o.PayCurrency.IsSet() {
		toSerialize["pay_currency"] = o.PayCurrency.Get()
	}
	if o.PayGroup.IsSet() {
		toSerialize["pay_group"] = o.PayGroup.Get()
	}
	if o.FlsaStatus.IsSet() {
		toSerialize["flsa_status"] = o.FlsaStatus.Get()
	}
	if o.EffectiveDate.IsSet() {
		toSerialize["effective_date"] = o.EffectiveDate.Get()
	}
	if o.EmploymentType.IsSet() {
		toSerialize["employment_type"] = o.EmploymentType.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	if o.FieldMappings != nil {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return json.Marshal(toSerialize)
}

func (v *Employment) UnmarshalJSON(src []byte) error {
    type EmploymentUnmarshalTarget Employment

	var intermediateResult EmploymentUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = Employment(intermediateResult)
	return nil
}
type NullableEmployment struct {
	value *Employment
	isSet bool
}

func (v NullableEmployment) Get() *Employment {
	return v.value
}

func (v *NullableEmployment) Set(val *Employment) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployment) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployment(val *Employment) *NullableEmployment {
	return &NullableEmployment{value: val, isSet: true}
}

func (v NullableEmployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


