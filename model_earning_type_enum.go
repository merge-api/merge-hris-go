/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// EarningTypeEnum * `SALARY` - SALARY * `REIMBURSEMENT` - REIMBURSEMENT * `OVERTIME` - OVERTIME * `BONUS` - BONUS
type EarningTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of EarningTypeEnum
const (
    EARNINGTYPEENUM_MERGE_NONSTANDARD_VALUE EarningTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	EARNINGTYPEENUM_SALARY EarningTypeEnum = "SALARY"
	EARNINGTYPEENUM_REIMBURSEMENT EarningTypeEnum = "REIMBURSEMENT"
	EARNINGTYPEENUM_OVERTIME EarningTypeEnum = "OVERTIME"
	EARNINGTYPEENUM_BONUS EarningTypeEnum = "BONUS"
)

var allowedEarningTypeEnumEnumValues = []EarningTypeEnum{
	"SALARY",
	"REIMBURSEMENT",
	"OVERTIME",
	"BONUS",
}

func (v *EarningTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EarningTypeEnum(value)
	for _, existing := range allowedEarningTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = EARNINGTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewEarningTypeEnumFromValue returns a pointer to a valid EarningTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEarningTypeEnumFromValue(v string) (*EarningTypeEnum, error) {
	ev := EarningTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := EARNINGTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EarningTypeEnum) IsValid() bool {
	for _, existing := range allowedEarningTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EarningTypeEnum value
func (v EarningTypeEnum) Ptr() *EarningTypeEnum {
	return &v
}

type NullableEarningTypeEnum struct {
	value *EarningTypeEnum
	isSet bool
}

func (v NullableEarningTypeEnum) Get() *EarningTypeEnum {
	return v.value
}

func (v *NullableEarningTypeEnum) Set(val *EarningTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningTypeEnum(val *EarningTypeEnum) *NullableEarningTypeEnum {
	return &NullableEarningTypeEnum{value: val, isSet: true}
}

func (v NullableEarningTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

