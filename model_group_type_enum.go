/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// GroupTypeEnum * `TEAM` - TEAM * `DEPARTMENT` - DEPARTMENT * `COST_CENTER` - COST_CENTER * `BUSINESS_UNIT` - BUSINESS_UNIT * `GROUP` - GROUP
type GroupTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of GroupTypeEnum
const (
    GROUPTYPEENUM_MERGE_NONSTANDARD_VALUE GroupTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	GROUPTYPEENUM_TEAM GroupTypeEnum = "TEAM"
	GROUPTYPEENUM_DEPARTMENT GroupTypeEnum = "DEPARTMENT"
	GROUPTYPEENUM_COST_CENTER GroupTypeEnum = "COST_CENTER"
	GROUPTYPEENUM_BUSINESS_UNIT GroupTypeEnum = "BUSINESS_UNIT"
	GROUPTYPEENUM_GROUP GroupTypeEnum = "GROUP"
)

var allowedGroupTypeEnumEnumValues = []GroupTypeEnum{
	"TEAM",
	"DEPARTMENT",
	"COST_CENTER",
	"BUSINESS_UNIT",
	"GROUP",
}

func (v *GroupTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupTypeEnum(value)
	for _, existing := range allowedGroupTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = GROUPTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewGroupTypeEnumFromValue returns a pointer to a valid GroupTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupTypeEnumFromValue(v string) (*GroupTypeEnum, error) {
	ev := GroupTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := GROUPTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupTypeEnum) IsValid() bool {
	for _, existing := range allowedGroupTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupTypeEnum value
func (v GroupTypeEnum) Ptr() *GroupTypeEnum {
	return &v
}

type NullableGroupTypeEnum struct {
	value *GroupTypeEnum
	isSet bool
}

func (v NullableGroupTypeEnum) Get() *GroupTypeEnum {
	return v.value
}

func (v *NullableGroupTypeEnum) Set(val *GroupTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupTypeEnum(val *GroupTypeEnum) *NullableGroupTypeEnum {
	return &NullableGroupTypeEnum{value: val, isSet: true}
}

func (v NullableGroupTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

