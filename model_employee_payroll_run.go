/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"time"
)

// EmployeePayrollRun # The EmployeePayrollRun Object ### Description The `EmployeePayrollRun` object is used to represent a payroll run for a specific employee.  ### Usage Example Fetch from the `LIST EmployeePayrollRun` endpoint and filter by `ID` to show all employee payroll runs.
type EmployeePayrollRun struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	Employee NullableString `json:"employee,omitempty"`
	PayrollRun NullableString `json:"payroll_run,omitempty"`
	// The gross pay from the run.
	GrossPay NullableFloat32 `json:"gross_pay,omitempty"`
	// The net pay from the run.
	NetPay NullableFloat32 `json:"net_pay,omitempty"`
	// The day and time the payroll run started.
	StartDate NullableTime `json:"start_date,omitempty"`
	// The day and time the payroll run ended.
	EndDate NullableTime `json:"end_date,omitempty"`
	// The day and time the payroll run was checked.
	CheckDate NullableTime `json:"check_date,omitempty"`
	Earnings *[]Earning `json:"earnings,omitempty"`
	Deductions *[]Deduction `json:"deductions,omitempty"`
	Taxes *[]Tax `json:"taxes,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
}

// NewEmployeePayrollRun instantiates a new EmployeePayrollRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployeePayrollRun() *EmployeePayrollRun {
	this := EmployeePayrollRun{}
	return &this
}

// NewEmployeePayrollRunWithDefaults instantiates a new EmployeePayrollRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeePayrollRunWithDefaults() *EmployeePayrollRun {
	this := EmployeePayrollRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmployeePayrollRun) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeePayrollRun) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmployeePayrollRun) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *EmployeePayrollRun) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *EmployeePayrollRun) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *EmployeePayrollRun) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetEmployee returns the Employee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetEmployee() string {
	if o == nil || o.Employee.Get() == nil {
		var ret string
		return ret
	}
	return *o.Employee.Get()
}

// GetEmployeeOk returns a tuple with the Employee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetEmployeeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Employee.Get(), o.Employee.IsSet()
}

// HasEmployee returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasEmployee() bool {
	if o != nil && o.Employee.IsSet() {
		return true
	}

	return false
}

// SetEmployee gets a reference to the given NullableString and assigns it to the Employee field.
func (o *EmployeePayrollRun) SetEmployee(v string) {
	o.Employee.Set(&v)
}
// SetEmployeeNil sets the value for Employee to be an explicit nil
func (o *EmployeePayrollRun) SetEmployeeNil() {
	o.Employee.Set(nil)
}

// UnsetEmployee ensures that no value is present for Employee, not even an explicit nil
func (o *EmployeePayrollRun) UnsetEmployee() {
	o.Employee.Unset()
}

// GetPayrollRun returns the PayrollRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetPayrollRun() string {
	if o == nil || o.PayrollRun.Get() == nil {
		var ret string
		return ret
	}
	return *o.PayrollRun.Get()
}

// GetPayrollRunOk returns a tuple with the PayrollRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetPayrollRunOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayrollRun.Get(), o.PayrollRun.IsSet()
}

// HasPayrollRun returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasPayrollRun() bool {
	if o != nil && o.PayrollRun.IsSet() {
		return true
	}

	return false
}

// SetPayrollRun gets a reference to the given NullableString and assigns it to the PayrollRun field.
func (o *EmployeePayrollRun) SetPayrollRun(v string) {
	o.PayrollRun.Set(&v)
}
// SetPayrollRunNil sets the value for PayrollRun to be an explicit nil
func (o *EmployeePayrollRun) SetPayrollRunNil() {
	o.PayrollRun.Set(nil)
}

// UnsetPayrollRun ensures that no value is present for PayrollRun, not even an explicit nil
func (o *EmployeePayrollRun) UnsetPayrollRun() {
	o.PayrollRun.Unset()
}

// GetGrossPay returns the GrossPay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetGrossPay() float32 {
	if o == nil || o.GrossPay.Get() == nil {
		var ret float32
		return ret
	}
	return *o.GrossPay.Get()
}

// GetGrossPayOk returns a tuple with the GrossPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetGrossPayOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GrossPay.Get(), o.GrossPay.IsSet()
}

// HasGrossPay returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasGrossPay() bool {
	if o != nil && o.GrossPay.IsSet() {
		return true
	}

	return false
}

// SetGrossPay gets a reference to the given NullableFloat32 and assigns it to the GrossPay field.
func (o *EmployeePayrollRun) SetGrossPay(v float32) {
	o.GrossPay.Set(&v)
}
// SetGrossPayNil sets the value for GrossPay to be an explicit nil
func (o *EmployeePayrollRun) SetGrossPayNil() {
	o.GrossPay.Set(nil)
}

// UnsetGrossPay ensures that no value is present for GrossPay, not even an explicit nil
func (o *EmployeePayrollRun) UnsetGrossPay() {
	o.GrossPay.Unset()
}

// GetNetPay returns the NetPay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetNetPay() float32 {
	if o == nil || o.NetPay.Get() == nil {
		var ret float32
		return ret
	}
	return *o.NetPay.Get()
}

// GetNetPayOk returns a tuple with the NetPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetNetPayOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetPay.Get(), o.NetPay.IsSet()
}

// HasNetPay returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasNetPay() bool {
	if o != nil && o.NetPay.IsSet() {
		return true
	}

	return false
}

// SetNetPay gets a reference to the given NullableFloat32 and assigns it to the NetPay field.
func (o *EmployeePayrollRun) SetNetPay(v float32) {
	o.NetPay.Set(&v)
}
// SetNetPayNil sets the value for NetPay to be an explicit nil
func (o *EmployeePayrollRun) SetNetPayNil() {
	o.NetPay.Set(nil)
}

// UnsetNetPay ensures that no value is present for NetPay, not even an explicit nil
func (o *EmployeePayrollRun) UnsetNetPay() {
	o.NetPay.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetStartDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *EmployeePayrollRun) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *EmployeePayrollRun) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *EmployeePayrollRun) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetEndDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *EmployeePayrollRun) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *EmployeePayrollRun) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *EmployeePayrollRun) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetCheckDate returns the CheckDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetCheckDate() time.Time {
	if o == nil || o.CheckDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CheckDate.Get()
}

// GetCheckDateOk returns a tuple with the CheckDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetCheckDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CheckDate.Get(), o.CheckDate.IsSet()
}

// HasCheckDate returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasCheckDate() bool {
	if o != nil && o.CheckDate.IsSet() {
		return true
	}

	return false
}

// SetCheckDate gets a reference to the given NullableTime and assigns it to the CheckDate field.
func (o *EmployeePayrollRun) SetCheckDate(v time.Time) {
	o.CheckDate.Set(&v)
}
// SetCheckDateNil sets the value for CheckDate to be an explicit nil
func (o *EmployeePayrollRun) SetCheckDateNil() {
	o.CheckDate.Set(nil)
}

// UnsetCheckDate ensures that no value is present for CheckDate, not even an explicit nil
func (o *EmployeePayrollRun) UnsetCheckDate() {
	o.CheckDate.Unset()
}

// GetEarnings returns the Earnings field value if set, zero value otherwise.
func (o *EmployeePayrollRun) GetEarnings() []Earning {
	if o == nil || o.Earnings == nil {
		var ret []Earning
		return ret
	}
	return *o.Earnings
}

// GetEarningsOk returns a tuple with the Earnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeePayrollRun) GetEarningsOk() (*[]Earning, bool) {
	if o == nil || o.Earnings == nil {
		return nil, false
	}
	return o.Earnings, true
}

// HasEarnings returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasEarnings() bool {
	if o != nil && o.Earnings != nil {
		return true
	}

	return false
}

// SetEarnings gets a reference to the given []Earning and assigns it to the Earnings field.
func (o *EmployeePayrollRun) SetEarnings(v []Earning) {
	o.Earnings = &v
}

// GetDeductions returns the Deductions field value if set, zero value otherwise.
func (o *EmployeePayrollRun) GetDeductions() []Deduction {
	if o == nil || o.Deductions == nil {
		var ret []Deduction
		return ret
	}
	return *o.Deductions
}

// GetDeductionsOk returns a tuple with the Deductions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeePayrollRun) GetDeductionsOk() (*[]Deduction, bool) {
	if o == nil || o.Deductions == nil {
		return nil, false
	}
	return o.Deductions, true
}

// HasDeductions returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasDeductions() bool {
	if o != nil && o.Deductions != nil {
		return true
	}

	return false
}

// SetDeductions gets a reference to the given []Deduction and assigns it to the Deductions field.
func (o *EmployeePayrollRun) SetDeductions(v []Deduction) {
	o.Deductions = &v
}

// GetTaxes returns the Taxes field value if set, zero value otherwise.
func (o *EmployeePayrollRun) GetTaxes() []Tax {
	if o == nil || o.Taxes == nil {
		var ret []Tax
		return ret
	}
	return *o.Taxes
}

// GetTaxesOk returns a tuple with the Taxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeePayrollRun) GetTaxesOk() (*[]Tax, bool) {
	if o == nil || o.Taxes == nil {
		return nil, false
	}
	return o.Taxes, true
}

// HasTaxes returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasTaxes() bool {
	if o != nil && o.Taxes != nil {
		return true
	}

	return false
}

// SetTaxes gets a reference to the given []Tax and assigns it to the Taxes field.
func (o *EmployeePayrollRun) SetTaxes(v []Tax) {
	o.Taxes = &v
}

// GetRemoteData returns the RemoteData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmployeePayrollRun) GetRemoteData() []RemoteData {
	if o == nil  {
		var ret []RemoteData
		return ret
	}
	return o.RemoteData
}

// GetRemoteDataOk returns a tuple with the RemoteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmployeePayrollRun) GetRemoteDataOk() (*[]RemoteData, bool) {
	if o == nil || o.RemoteData == nil {
		return nil, false
	}
	return &o.RemoteData, true
}

// HasRemoteData returns a boolean if a field has been set.
func (o *EmployeePayrollRun) HasRemoteData() bool {
	if o != nil && o.RemoteData != nil {
		return true
	}

	return false
}

// SetRemoteData gets a reference to the given []RemoteData and assigns it to the RemoteData field.
func (o *EmployeePayrollRun) SetRemoteData(v []RemoteData) {
	o.RemoteData = v
}

func (o EmployeePayrollRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.Employee.IsSet() {
		toSerialize["employee"] = o.Employee.Get()
	}
	if o.PayrollRun.IsSet() {
		toSerialize["payroll_run"] = o.PayrollRun.Get()
	}
	if o.GrossPay.IsSet() {
		toSerialize["gross_pay"] = o.GrossPay.Get()
	}
	if o.NetPay.IsSet() {
		toSerialize["net_pay"] = o.NetPay.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if o.CheckDate.IsSet() {
		toSerialize["check_date"] = o.CheckDate.Get()
	}
	if o.Earnings != nil {
		toSerialize["earnings"] = o.Earnings
	}
	if o.Deductions != nil {
		toSerialize["deductions"] = o.Deductions
	}
	if o.Taxes != nil {
		toSerialize["taxes"] = o.Taxes
	}
	if o.RemoteData != nil {
		toSerialize["remote_data"] = o.RemoteData
	}
	return json.Marshal(toSerialize)
}

type NullableEmployeePayrollRun struct {
	value *EmployeePayrollRun
	isSet bool
}

func (v NullableEmployeePayrollRun) Get() *EmployeePayrollRun {
	return v.value
}

func (v *NullableEmployeePayrollRun) Set(val *EmployeePayrollRun) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployeePayrollRun) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployeePayrollRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployeePayrollRun(val *EmployeePayrollRun) *NullableEmployeePayrollRun {
	return &NullableEmployeePayrollRun{value: val, isSet: true}
}

func (v NullableEmployeePayrollRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployeePayrollRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


