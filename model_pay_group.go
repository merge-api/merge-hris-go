/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// PayGroup # The PayGroup Object ### Description The `PayGroup` object is used to represent Pay Group information that employees belong to. This is often referenced with an Employee object.  ### Usage Example Fetch from the `LIST PayGroup` endpoint and filter by `ID` to show all pay group information.
type PayGroup struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	// The pay group name.
	PayGroupName NullableString `json:"pay_group_name,omitempty"`
	// Indicates whether or not this object has been deleted on the third-party.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
    // raw json response by property name
    ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewPayGroup instantiates a new PayGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayGroup() *PayGroup {
	this := PayGroup{}
	return &this
}

// NewPayGroupWithDefaults instantiates a new PayGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayGroupWithDefaults() *PayGroup {
	this := PayGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PayGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PayGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PayGroup) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayGroup) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayGroup) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *PayGroup) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *PayGroup) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *PayGroup) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *PayGroup) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetPayGroupName returns the PayGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PayGroup) GetPayGroupName() string {
	if o == nil || o.PayGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PayGroupName.Get()
}

// GetPayGroupNameOk returns a tuple with the PayGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PayGroup) GetPayGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayGroupName.Get(), o.PayGroupName.IsSet()
}

// HasPayGroupName returns a boolean if a field has been set.
func (o *PayGroup) HasPayGroupName() bool {
	if o != nil && o.PayGroupName.IsSet() {
		return true
	}

	return false
}

// SetPayGroupName gets a reference to the given NullableString and assigns it to the PayGroupName field.
func (o *PayGroup) SetPayGroupName(v string) {
	o.PayGroupName.Set(&v)
}
// SetPayGroupNameNil sets the value for PayGroupName to be an explicit nil
func (o *PayGroup) SetPayGroupNameNil() {
	o.PayGroupName.Set(nil)
}

// UnsetPayGroupName ensures that no value is present for PayGroupName, not even an explicit nil
func (o *PayGroup) UnsetPayGroupName() {
	o.PayGroupName.Unset()
}

// GetRemoteWasDeleted returns the RemoteWasDeleted field value if set, zero value otherwise.
func (o *PayGroup) GetRemoteWasDeleted() bool {
	if o == nil || o.RemoteWasDeleted == nil {
		var ret bool
		return ret
	}
	return *o.RemoteWasDeleted
}

// GetRemoteWasDeletedOk returns a tuple with the RemoteWasDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayGroup) GetRemoteWasDeletedOk() (*bool, bool) {
	if o == nil || o.RemoteWasDeleted == nil {
		return nil, false
	}
	return o.RemoteWasDeleted, true
}

// HasRemoteWasDeleted returns a boolean if a field has been set.
func (o *PayGroup) HasRemoteWasDeleted() bool {
	if o != nil && o.RemoteWasDeleted != nil {
		return true
	}

	return false
}

// SetRemoteWasDeleted gets a reference to the given bool and assigns it to the RemoteWasDeleted field.
func (o *PayGroup) SetRemoteWasDeleted(v bool) {
	o.RemoteWasDeleted = &v
}

func (o PayGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.PayGroupName.IsSet() {
		toSerialize["pay_group_name"] = o.PayGroupName.Get()
	}
	if o.RemoteWasDeleted != nil {
		toSerialize["remote_was_deleted"] = o.RemoteWasDeleted
	}
	return json.Marshal(toSerialize)
}

func (v *PayGroup) UnmarshalJSON(src []byte) error {
    type PayGroupUnmarshalTarget PayGroup

	var intermediateResult PayGroupUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = PayGroup(intermediateResult)
	return nil
}
type NullablePayGroup struct {
	value *PayGroup
	isSet bool
}

func (v NullablePayGroup) Get() *PayGroup {
	return v.value
}

func (v *NullablePayGroup) Set(val *PayGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePayGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePayGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayGroup(val *PayGroup) *NullablePayGroup {
	return &NullablePayGroup{value: val, isSet: true}
}

func (v NullablePayGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


