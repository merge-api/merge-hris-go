/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// ValidationProblemSource struct for ValidationProblemSource
type ValidationProblemSource struct {
	Pointer string `json:"pointer"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewValidationProblemSource instantiates a new ValidationProblemSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationProblemSource(pointer string) *ValidationProblemSource {
	this := ValidationProblemSource{}
	this.Pointer = pointer
	return &this
}

// NewValidationProblemSourceWithDefaults instantiates a new ValidationProblemSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationProblemSourceWithDefaults() *ValidationProblemSource {
	this := ValidationProblemSource{}
	return &this
}

// GetPointer returns the Pointer field value
func (o *ValidationProblemSource) GetPointer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pointer
}

// GetPointerOk returns a tuple with the Pointer field value
// and a boolean to check if the value has been set.
func (o *ValidationProblemSource) GetPointerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Pointer, true
}

// SetPointer sets field value
func (o *ValidationProblemSource) SetPointer(v string) {
	o.Pointer = v
}

func (o ValidationProblemSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pointer"] = o.Pointer
	}
	return json.Marshal(toSerialize)
}

func (v *ValidationProblemSource) UnmarshalJSON(src []byte) error {
    type ValidationProblemSourceUnmarshalTarget ValidationProblemSource

	var intermediateResult ValidationProblemSourceUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = ValidationProblemSource(intermediateResult)
	return nil
}
type NullableValidationProblemSource struct {
	value *ValidationProblemSource
	isSet bool
}

func (v NullableValidationProblemSource) Get() *ValidationProblemSource {
	return v.value
}

func (v *NullableValidationProblemSource) Set(val *ValidationProblemSource) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationProblemSource) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationProblemSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationProblemSource(val *ValidationProblemSource) *NullableValidationProblemSource {
	return &NullableValidationProblemSource{value: val, isSet: true}
}

func (v NullableValidationProblemSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationProblemSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


