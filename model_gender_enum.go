/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// GenderEnum the model 'GenderEnum'
type GenderEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of GenderEnum
const (
    GENDERENUM_MERGE_NONSTANDARD_VALUE GenderEnum = "MERGE_NONSTANDARD_VALUE"
    
	GENDERENUM_MALE GenderEnum = "MALE"
	GENDERENUM_FEMALE GenderEnum = "FEMALE"
	GENDERENUM_NON_BINARY GenderEnum = "NON-BINARY"
	GENDERENUM_OTHER GenderEnum = "OTHER"
	GENDERENUM_PREFER_NOT_TO_DISCLOSE GenderEnum = "PREFER_NOT_TO_DISCLOSE"
)

var allowedGenderEnumEnumValues = []GenderEnum{
	"MALE",
	"FEMALE",
	"NON-BINARY",
	"OTHER",
	"PREFER_NOT_TO_DISCLOSE",
}

func (v *GenderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenderEnum(value)
	for _, existing := range allowedGenderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = GENDERENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewGenderEnumFromValue returns a pointer to a valid GenderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenderEnumFromValue(v string) (*GenderEnum, error) {
	ev := GenderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := GENDERENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenderEnum) IsValid() bool {
	for _, existing := range allowedGenderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GenderEnum value
func (v GenderEnum) Ptr() *GenderEnum {
	return &v
}

type NullableGenderEnum struct {
	value *GenderEnum
	isSet bool
}

func (v NullableGenderEnum) Get() *GenderEnum {
	return v.value
}

func (v *NullableGenderEnum) Set(val *GenderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGenderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGenderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenderEnum(val *GenderEnum) *NullableGenderEnum {
	return &NullableGenderEnum{value: val, isSet: true}
}

func (v NullableGenderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

