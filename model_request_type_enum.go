/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// RequestTypeEnum the model 'RequestTypeEnum'
type RequestTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of RequestTypeEnum
const (
    REQUESTTYPEENUM_MERGE_NONSTANDARD_VALUE RequestTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	REQUESTTYPEENUM_VACATION RequestTypeEnum = "VACATION"
	REQUESTTYPEENUM_SICK RequestTypeEnum = "SICK"
	REQUESTTYPEENUM_PERSONAL RequestTypeEnum = "PERSONAL"
	REQUESTTYPEENUM_JURY_DUTY RequestTypeEnum = "JURY_DUTY"
	REQUESTTYPEENUM_VOLUNTEER RequestTypeEnum = "VOLUNTEER"
	REQUESTTYPEENUM_BEREAVEMENT RequestTypeEnum = "BEREAVEMENT"
)

var allowedRequestTypeEnumEnumValues = []RequestTypeEnum{
	"VACATION",
	"SICK",
	"PERSONAL",
	"JURY_DUTY",
	"VOLUNTEER",
	"BEREAVEMENT",
}

func (v *RequestTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestTypeEnum(value)
	for _, existing := range allowedRequestTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = REQUESTTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewRequestTypeEnumFromValue returns a pointer to a valid RequestTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestTypeEnumFromValue(v string) (*RequestTypeEnum, error) {
	ev := RequestTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := REQUESTTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestTypeEnum) IsValid() bool {
	for _, existing := range allowedRequestTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestTypeEnum value
func (v RequestTypeEnum) Ptr() *RequestTypeEnum {
	return &v
}

type NullableRequestTypeEnum struct {
	value *RequestTypeEnum
	isSet bool
}

func (v NullableRequestTypeEnum) Get() *RequestTypeEnum {
	return v.value
}

func (v *NullableRequestTypeEnum) Set(val *RequestTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTypeEnum(val *RequestTypeEnum) *NullableRequestTypeEnum {
	return &NullableRequestTypeEnum{value: val, isSet: true}
}

func (v NullableRequestTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

