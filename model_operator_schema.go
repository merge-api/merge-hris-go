/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// OperatorSchema struct for OperatorSchema
type OperatorSchema struct {
	// The operator for which an operator schema is defined.
	Operator *string `json:"operator,omitempty"`
	// Whether the operator can be repeated multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewOperatorSchema instantiates a new OperatorSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorSchema() *OperatorSchema {
	this := OperatorSchema{}
	return &this
}

// NewOperatorSchemaWithDefaults instantiates a new OperatorSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorSchemaWithDefaults() *OperatorSchema {
	this := OperatorSchema{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *OperatorSchema) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorSchema) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *OperatorSchema) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *OperatorSchema) SetOperator(v string) {
	o.Operator = &v
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *OperatorSchema) GetIsUnique() bool {
	if o == nil || o.IsUnique == nil {
		var ret bool
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorSchema) GetIsUniqueOk() (*bool, bool) {
	if o == nil || o.IsUnique == nil {
		return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *OperatorSchema) HasIsUnique() bool {
	if o != nil && o.IsUnique != nil {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given bool and assigns it to the IsUnique field.
func (o *OperatorSchema) SetIsUnique(v bool) {
	o.IsUnique = &v
}

func (o OperatorSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.IsUnique != nil {
		toSerialize["is_unique"] = o.IsUnique
	}
	return json.Marshal(toSerialize)
}

func (v *OperatorSchema) UnmarshalJSON(src []byte) error {
    type OperatorSchemaUnmarshalTarget OperatorSchema

	var intermediateResult OperatorSchemaUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = OperatorSchema(intermediateResult)
	return nil
}
type NullableOperatorSchema struct {
	value *OperatorSchema
	isSet bool
}

func (v NullableOperatorSchema) Get() *OperatorSchema {
	return v.value
}

func (v *NullableOperatorSchema) Set(val *OperatorSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorSchema(val *OperatorSchema) *NullableOperatorSchema {
	return &NullableOperatorSchema{value: val, isSet: true}
}

func (v NullableOperatorSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


