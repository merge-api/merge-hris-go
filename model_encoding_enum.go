/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// EncodingEnum * `RAW` - RAW * `BASE64` - BASE64 * `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of EncodingEnum
const (
    ENCODINGENUM_MERGE_NONSTANDARD_VALUE EncodingEnum = "MERGE_NONSTANDARD_VALUE"
    
	ENCODINGENUM_RAW EncodingEnum = "RAW"
	ENCODINGENUM_BASE64 EncodingEnum = "BASE64"
	ENCODINGENUM_GZIP_BASE64 EncodingEnum = "GZIP_BASE64"
)

var allowedEncodingEnumEnumValues = []EncodingEnum{
	"RAW",
	"BASE64",
	"GZIP_BASE64",
}

func (v *EncodingEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncodingEnum(value)
	for _, existing := range allowedEncodingEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ENCODINGENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewEncodingEnumFromValue returns a pointer to a valid EncodingEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncodingEnumFromValue(v string) (*EncodingEnum, error) {
	ev := EncodingEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := ENCODINGENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncodingEnum) IsValid() bool {
	for _, existing := range allowedEncodingEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncodingEnum value
func (v EncodingEnum) Ptr() *EncodingEnum {
	return &v
}

type NullableEncodingEnum struct {
	value *EncodingEnum
	isSet bool
}

func (v NullableEncodingEnum) Get() *EncodingEnum {
	return v.value
}

func (v *NullableEncodingEnum) Set(val *EncodingEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEncodingEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEncodingEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncodingEnum(val *EncodingEnum) *NullableEncodingEnum {
	return &NullableEncodingEnum{value: val, isSet: true}
}

func (v NullableEncodingEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncodingEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

