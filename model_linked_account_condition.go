/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// LinkedAccountCondition struct for LinkedAccountCondition
type LinkedAccountCondition struct {
	// The ID indicating which condition schema to use for a specific condition.
	ConditionSchemaId string `json:"condition_schema_id"`
	// The common model for a specific condition.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. \"Skip Manager\".
	NativeName NullableString `json:"native_name"`
	// The operator for a specific condition.
	Operator string `json:"operator"`
	// The value for a condition.
	Value interface{} `json:"value,omitempty"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\".
	FieldName NullableString `json:"field_name"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewLinkedAccountCondition instantiates a new LinkedAccountCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedAccountCondition(conditionSchemaId string, nativeName NullableString, operator string, fieldName NullableString) *LinkedAccountCondition {
	this := LinkedAccountCondition{}
	this.ConditionSchemaId = conditionSchemaId
	this.NativeName = nativeName
	this.Operator = operator
	this.FieldName = fieldName
	return &this
}

// NewLinkedAccountConditionWithDefaults instantiates a new LinkedAccountCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedAccountConditionWithDefaults() *LinkedAccountCondition {
	this := LinkedAccountCondition{}
	return &this
}

// GetConditionSchemaId returns the ConditionSchemaId field value
func (o *LinkedAccountCondition) GetConditionSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConditionSchemaId
}

// GetConditionSchemaIdOk returns a tuple with the ConditionSchemaId field value
// and a boolean to check if the value has been set.
func (o *LinkedAccountCondition) GetConditionSchemaIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConditionSchemaId, true
}

// SetConditionSchemaId sets field value
func (o *LinkedAccountCondition) SetConditionSchemaId(v string) {
	o.ConditionSchemaId = v
}

// GetCommonModel returns the CommonModel field value if set, zero value otherwise.
func (o *LinkedAccountCondition) GetCommonModel() string {
	if o == nil || o.CommonModel == nil {
		var ret string
		return ret
	}
	return *o.CommonModel
}

// GetCommonModelOk returns a tuple with the CommonModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedAccountCondition) GetCommonModelOk() (*string, bool) {
	if o == nil || o.CommonModel == nil {
		return nil, false
	}
	return o.CommonModel, true
}

// HasCommonModel returns a boolean if a field has been set.
func (o *LinkedAccountCondition) HasCommonModel() bool {
	if o != nil && o.CommonModel != nil {
		return true
	}

	return false
}

// SetCommonModel gets a reference to the given string and assigns it to the CommonModel field.
func (o *LinkedAccountCondition) SetCommonModel(v string) {
	o.CommonModel = &v
}

// GetNativeName returns the NativeName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LinkedAccountCondition) GetNativeName() string {
	if o == nil || o.NativeName.Get() == nil {
		var ret string
		return ret
	}

	return *o.NativeName.Get()
}

// GetNativeNameOk returns a tuple with the NativeName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkedAccountCondition) GetNativeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NativeName.Get(), o.NativeName.IsSet()
}

// SetNativeName sets field value
func (o *LinkedAccountCondition) SetNativeName(v string) {
	o.NativeName.Set(&v)
}

// GetOperator returns the Operator field value
func (o *LinkedAccountCondition) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *LinkedAccountCondition) GetOperatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *LinkedAccountCondition) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkedAccountCondition) GetValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkedAccountCondition) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *LinkedAccountCondition) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *LinkedAccountCondition) SetValue(v interface{}) {
	o.Value = v
}

// GetFieldName returns the FieldName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LinkedAccountCondition) GetFieldName() string {
	if o == nil || o.FieldName.Get() == nil {
		var ret string
		return ret
	}

	return *o.FieldName.Get()
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkedAccountCondition) GetFieldNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldName.Get(), o.FieldName.IsSet()
}

// SetFieldName sets field value
func (o *LinkedAccountCondition) SetFieldName(v string) {
	o.FieldName.Set(&v)
}

func (o LinkedAccountCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["condition_schema_id"] = o.ConditionSchemaId
	}
	if o.CommonModel != nil {
		toSerialize["common_model"] = o.CommonModel
	}
	if true {
		toSerialize["native_name"] = o.NativeName.Get()
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["field_name"] = o.FieldName.Get()
	}
	return json.Marshal(toSerialize)
}

func (v *LinkedAccountCondition) UnmarshalJSON(src []byte) error {
    type LinkedAccountConditionUnmarshalTarget LinkedAccountCondition

	var intermediateResult LinkedAccountConditionUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = LinkedAccountCondition(intermediateResult)
	return nil
}
type NullableLinkedAccountCondition struct {
	value *LinkedAccountCondition
	isSet bool
}

func (v NullableLinkedAccountCondition) Get() *LinkedAccountCondition {
	return v.value
}

func (v *NullableLinkedAccountCondition) Set(val *LinkedAccountCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedAccountCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedAccountCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedAccountCondition(val *LinkedAccountCondition) *NullableLinkedAccountCondition {
	return &NullableLinkedAccountCondition{value: val, isSet: true}
}

func (v NullableLinkedAccountCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedAccountCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


