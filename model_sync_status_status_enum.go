/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// SyncStatusStatusEnum the model 'SyncStatusStatusEnum'
type SyncStatusStatusEnum string

// List of SyncStatusStatusEnum
const (
	SYNCSTATUSSTATUSENUM_SYNCING SyncStatusStatusEnum = "SYNCING"
	SYNCSTATUSSTATUSENUM_DONE SyncStatusStatusEnum = "DONE"
	SYNCSTATUSSTATUSENUM_FAILED SyncStatusStatusEnum = "FAILED"
)

var allowedSyncStatusStatusEnumEnumValues = []SyncStatusStatusEnum{
	"SYNCING",
	"DONE",
	"FAILED",
}

func (v *SyncStatusStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyncStatusStatusEnum(value)
	for _, existing := range allowedSyncStatusStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyncStatusStatusEnum", value)
}

// NewSyncStatusStatusEnumFromValue returns a pointer to a valid SyncStatusStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyncStatusStatusEnumFromValue(v string) (*SyncStatusStatusEnum, error) {
	ev := SyncStatusStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SyncStatusStatusEnum: valid values are %v", v, allowedSyncStatusStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyncStatusStatusEnum) IsValid() bool {
	for _, existing := range allowedSyncStatusStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyncStatusStatusEnum value
func (v SyncStatusStatusEnum) Ptr() *SyncStatusStatusEnum {
	return &v
}

type NullableSyncStatusStatusEnum struct {
	value *SyncStatusStatusEnum
	isSet bool
}

func (v NullableSyncStatusStatusEnum) Get() *SyncStatusStatusEnum {
	return v.value
}

func (v *NullableSyncStatusStatusEnum) Set(val *SyncStatusStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncStatusStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncStatusStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncStatusStatusEnum(val *SyncStatusStatusEnum) *NullableSyncStatusStatusEnum {
	return &NullableSyncStatusStatusEnum{value: val, isSet: true}
}

func (v NullableSyncStatusStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncStatusStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

